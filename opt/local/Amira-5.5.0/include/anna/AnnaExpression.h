/*****************************************************************************
 *
 * anna -- expression parsing library 
 *
 * Copyright 1993-1997 by Malte Zoeckler and Johannes Schmidt-Ehrenberg
 * All Rights Reserved.
 *
 * This is UNPUBLISHED PROPRIETARY SOURCE CODE ;
 * the contents of this file may not be disclosed to third parties, copied or
 * duplicated in any form, in whole or in part, without the prior written
 * permission of the copyright holders
 *
 ****************************************************************************/
#ifndef __ANNA_EXPRESSION_H
#define __ANNA_EXPRESSION_H

#include "Anna.h"

#include "AnnaWinDLLApi.h"

#include <mclib/McDArray.h>
#include <mclib/McString.h>
#include <mclib/McHashTable.h>

/// Class for handling expression parsing and evaluation.
/// Intended use:
/// - Add names of (external) variables using addVar.
/// - Convert an expression into a tree of Anna objects using
///   initFromString.
///   All variables occuring in the expression must have been
///   set via addVar.
///   Internal variables as generated by assignments may be 
///   added to the list of variables.
/// - Get the total number of variables using numVars.
/// - Evaluate the expression using eval.
///   Provide an array of values which must have the size 
///   given by numVars and provide the values for all external
///   variables in the same order as they occur in the internal 
///   list of variable names.
class ANNA_API AnnaExpression 
{
public:
    ///
    AnnaExpression();

    ///
    ~AnnaExpression();

    /// Add a variable name.
    /// Returns index of variable in the internal list of variable names.
    /// Returns -1 if an empty name is given.
    int addVar(const char *name);

    /// Add an alias name for a previsously declared variable.
    void addVarAlias(const char* variableName, const char* aliasName);

    /// Turn an expression string into an Anna tree using strToAnna.
    /// Returns true on success, false in case of failure.
    /// In case of failure, the default expression "0" will be set.
    bool initFromString(const char *expr);

    /// Returns the number of variables in mVarNames, including the
    /// internal variables.
    int numVars();

    /// Returns the number of internal variables.
    int numInternalVars();

    /// Evaluate expression.
    /// varValues provides the values of (external) variables, in the
    /// same order as in the internal list of variable names.
    /// varValues must have length numVars (including internal variables).
    double eval(McDArray<double> &varValues, int &anError);

    /// Returns the variable name from the internal list for a given 
    /// index.
    /// Returns NULL if the index exceeds the list size;
    const char* varName(unsigned int index) const;

    /// Returns the index in the internal list for a given variable name.
    /// Returns -1 if the name is empty or if the name is not contained
    /// in the internal list.
    int varIndex(const char* name);

    /// Resets the expression to the default "0", and clears the list of 
    /// variable names.
    void clear();

    /// Resets the expression to the default "0" and copies list of 
    /// variable names from other AnnaExpression.
    void copyVarNames(AnnaExpression &other);

    /// Returns true if the given variable is needed for the current
    /// expression.
    bool isVarNeeded(const char* name) const;

    /// Returns a pointer to a new AnnaExpression representing the 
    /// derivative of the current expression with respect to the 
    /// variable given at name.
    /// Returns NULL in case of a failure in calculating the derivative.
    AnnaExpression* derivative(const char* name);

private:
    /// Resets the expression to the default "0".
    void setDefaultExpression();

    /// Root of anna tree generated by strToAnna;
    Anna *mExpr;

    /// Internal list of variables. May contain internal variables, if the
    /// expression contains assignments. Internal variables should always
    /// be located at the end of the list.
    McDArray<McString> mVarNames;

    McHashTable<McString,McString> mVariableAliasMap;

    /// Number of internal variables.
    unsigned int mInternalVars;
};
#endif
