/*=======================================================================
** SGI_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Author      : David Mott (MMM yyyy)
** Modified by : Gavin Bell (MMM yyyy)
**=======================================================================*/
/*=======================================================================
** VSG_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Modified by : VSG (MMM YYYY)
**=======================================================================*/


#ifdef SOQT
#  include <Inventor/Qt/devices/SoQtKeyboard.h>
#elif defined _WIN32
#  include <Inventor/Win/devices/SoWinKeyboard.h>
#else // _WIN32

#ifndef  _SO_XT_KEYBOARD_
#define  _SO_XT_KEYBOARD_

#include <X11/X.h>
#include <Inventor/Xt/devices/SoXtDevice.h>
#include <Inventor/events/SoKeyboardEvent.h>

#define SO_XT_ALL_KEYBOARD_EVENTS (KeyPressMask | KeyReleaseMask)

/**
 * Translates and reports events for the keyboard device.
 *
 * @ingroup Xt
 *
 * @DESCRIPTION
 *   This class manages events generated by the keyboard, including key press and
 *   release events (SoKeyboardEvent).
 *
 * @SEE_ALSO
 *    SoXtDevice,
 *    SoKeyboardEvent
 *
 *
 */

class INVENTORXT_API SoXtKeyboard : public SoXtDevice {
 public:
  /**
   * Constructor. To the constructor, pass which keyboard events you
   * are interested in as a bitwise OR of the following values:
   *
   * KeyPressMask - Key press messages
   *
   * KeyReleaseMask - Key release messages
   *
   * Or simply pass the defined value SO_XT_ALL_KEYBOARD_EVENTS for all keyboard
   * events. The device will only report events of this type for the widget it is
   * enabled on.
   */
  SoXtKeyboard(EventMask mask = SO_XT_ALL_KEYBOARD_EVENTS);
  /**
   * Destructor.
   */
  ~SoXtKeyboard();

  // These functions enable/disable this device for the passed widget.
  // the callback function f will be invoked when events occur in w.
  // data is the clientData which will be passed.
  virtual void        enable(SoWidget w, XtEventHandler f,
                             XtPointer data, Window win = (Window)NULL);
  virtual void        disable(SoWidget w, XtEventHandler f, XtPointer data);

  //
  // Converts an X event into an SoEvent,
  // returning NULL if the event is not from this device.
  //
  virtual const SoEvent * translateEvent(XAnyEvent *xevent);

 private:
  EventMask           eventMask;      // X event interest for this device
  SoKeyboardEvent     *keyEvent;      // keyboard press or release

  SoKeyboardEvent     *translateKeyEvent(XKeyEvent *ke, SoButtonEvent::State s);

};

#endif /* _SO_XT_KEYBOARD_ */

#endif // _WIN32


