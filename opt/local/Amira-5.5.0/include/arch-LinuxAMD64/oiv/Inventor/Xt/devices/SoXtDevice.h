/*=======================================================================
** SGI_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Author      : David Mott (MMM yyyy)
** Modified by : Gavin Bell (MMM yyyy)
**=======================================================================*/
/*=======================================================================
** VSG_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Modified by : VSG (MMM YYYY)
**=======================================================================*/


#ifdef SOQT
#  include <Inventor/Qt/devices/SoQtDevice.h>
#elif defined _WIN32
#  include <Inventor/Win/devices/SoWinDevice.h>
#else // _WIN32

#ifndef  _SO_XT_DEVICE_
#define  _SO_XT_DEVICE_

#include <X11/Intrinsic.h>
#include <Inventor/SbLinear.h>
#include <Inventor/events/SoEvent.h>
#include <Inventor/Xt/SoXtDef.h>

/**
 * Abstract base class for input devices
 * 
 * @ingroup Xt
 * 
 * @DESCRIPTION
 *   This is the abstract base class for devices in the Open Inventor Xt component
 *   and utility library. When a device is registered with an SoXtRenderArea, the
 *   device is able to generate messages in the render area window.
 *
 *   Used internally by SoXtRenderArea and derived classes.  Can also be used
 *   by the application to translate system events into SoEvent objects.
 * 
 * @SEE_ALSO
 *    SoXtMouse,
 *    SoXtKeyboard,
 *    SoXtSpaceBall,
 *    SoXtInputFocus,
 *    SoXtRenderArea
 */ 

class INVENTORXT_API SoXtDevice {
 public:
  /**
   * Enables the device for the passed widget. When enabled, the callback
   * function @B f @b will be invoked when events occur in the window. @B data @b
   * is the @B clientData @b which will be passed.
   */
  virtual void        enable(SoWidget w, XtEventHandler f,
                             XtPointer data, Window win = (Window)NULL) = 0;
  /**
   * Disables the device for the passed widget. 
   */
  virtual void        disable(SoWidget w, XtEventHandler f, XtPointer data) = 0;
    
  /**
   * Attempts to convert the passed event into an SoEvent. @BR
   * Returns a pointer to an internal SoEvent object owned by the class.
   * Do not delete this object. If the message was not generated by this 
   * device, then NULL is returned.
   */
  virtual const SoEvent * translateEvent(XAnyEvent *xevent) = 0;

  /**
   * Sets the size of the window this device is registered for. This allows
   * the device to correctly convert position information from X window coordinates
   * (origin at top left) to Open Inventor window coordinates (origin at bottom
   * left). (SoXtRenderArea will automatically call this method for each device
   * registered on it whenever the window size changes.) Note: Setting the window
   * size only affects the size as perceived by the device and not the actual window
   * size.
   */
  void                setWindowSize(const SbVec2s &s) { winSize = s; }
  /**
   * Gets the size of the window this device is registered for. 
   */
  const SbVec2s &     getWindowSize() const           { return winSize; }

  virtual ~SoXtDevice() {};

 protected:
  /**
   *  Set the window coordinate from the passed x,y value. This will flip
   *  the y value to convert from X coordinates to So coordinates.
   *  Note : The position is float to handle particular use cases when a desktop is magnified
   *  on a wall of screens using ScaleViz in correlation with a tracker
   *  device calibrated for this wall.
   */
  inline void         setEventPosition(SoEvent *event, float x, float y) const;

  /**
   *  
   *  Set common event properties.
   */
  void setCommonEventProperties(SoEvent *event,
				Display* display, Window root,
				int x, int y, 
				int x_root, int y_root,
				Time time, unsigned int state);
    
 private:
  SbVec2s             winSize;    // size of the window this device works in

};

// Inline functions
void
SoXtDevice::setEventPosition(SoEvent *event, float x, float y) const
{
  event->setPosition(SbVec2f(x, (((float)winSize[1]) - 1.f) - y));
}

#endif /* _SO_XT_DEVICE_ */

#endif // _WIN32


