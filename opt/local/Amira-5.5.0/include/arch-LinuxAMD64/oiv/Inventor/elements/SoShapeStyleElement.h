/*=======================================================================
** SGI_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Author      : Alan Norton (MMM yyyy)
** Modified by : Gavin Bell (MMM yyyy)
**=======================================================================*/
/*=======================================================================
** VSG_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Modified by : VSG (MMM YYYY)
**=======================================================================*/


#ifndef  _SO_SHAPE_STYLE_ELEMENT
#define  _SO_SHAPE_STYLE_ELEMENT

#include <Inventor/elements/SoInt32Element.h>
#include <Inventor/elements/SoLazyElement.h>
#include <Inventor/STL/vector>

#ifdef _WIN32
#pragma warning( push )
#pragma warning(disable:4251)
#endif

/**
*   Stores some information used by shapes.
* 
*  @ingroup elements
* 
*   @DESCRIPTION
*   This elements stores some information shapes need to quickly
*   determine whether or not they should render, and, if they should
*   render, how they should render. Specifically, it stores:
* 
*   NeedNormals: TRUE if lighting is on@BR
*   NeedTexCoords: TRUE if texturing and texcoords not generated by GL@BR
*   MightNotRender: TRUE if:@BR
*            - bounding box complexity
*            - invisible drawstyle
*            - render abort callback registered
* 
*   @SEE_ALSO
*/

SoEXTENDER_Documented class INVENTOR_API SoShapeStyleElement : public SoElement {

  SO_ELEMENT_HEADER(SoShapeStyleElement);

 public:
 
    /** flags */
  enum flags { 
    /** INVISIBLE_BIT */
    INVISIBLE_BIT = 0x1, 
    /** BBOX_BIT */
    BBOX_BIT = 0x2, 
    /** DELAY_TRANSP_BIT */
    DELAY_TRANSP_BIT = 0x4
  };

  /**
  *  Get a readable instance.
  */
  static const SoShapeStyleElement *  get(SoState *state);

  /**
  *  Returns TRUE if shapes may not render for some reason.
  */
  SbBool              mightNotRender() const { return m_delayFlags; }

  /**
  *  Returns TRUE if need normals.
  */
  SbBool              needNormals() const { return m_needNorms; }
    
  /**
  *  Returns TRUE if need texture coordinates.
  */
  SbBool              needTexCoords(int unit=0) const
  { return (getTextureData(unit).texEnabled && (!getTextureData(unit).texFunc)); }

  /**
  *  Returns TRUE if need 3D texture coordinates.
  */
  SbBool              needTexCoords3(int unit=0) const
  { return (getTextureData(unit).tex3Enabled && (!getTextureData(unit).texFunc)); }

  /**
  *  Returns a mask that can be used by the SoVertexPropertyCache
  *  class (see SoVertexProperty.h for the SoRenderInfo class) to
  *  quickly mask out the normal or texture coordinate cases if
  *  normals or texture coordinates aren't needed.
  */
  int                 getRenderCaseMask() const
  { return m_renderCaseMask; }

  /**
  *  API used by other elements.
  */
  static void         setDrawStyle(SoState *state, int32_t value);
  /**
  *  API used by other elements.
  */
  static void         setComplexityType(SoState *state, int32_t value);
  /**
  *  API used by other elements.
  */
  static void         setTransparencyType(SoState *state, int32_t value);
  /**
  *  API used by other elements.
  */
  static void         setTextureEnabled(SoState *state, SbBool value, int unit=0);
  /**
  *  API used by other elements.
  */
  static void         setTexture3Enabled(SoState *state, SbBool value, int unit=0);
  /**
  *  API used by other elements.
  */
  static void         setTextureFunction(SoState *state, SbBool value, int unit=0);
  /**
  *  API used by other elements.
  */
  static void         setLightModel(SoState *state, int32_t value);
  /**
  *  Set value is TRUE if either diffuse, transparency, or materialbinding
  *  are overridden; otherwise FALSE.
  */
  static void         setOverrides(SoState *state, SbBool value);
  /**
  *  Returns TRUE if screen door is set.
  */
  static SbBool       isScreenDoor(SoState *state);

 SoINTERNAL public:
  SbBool      isTextureFunction(int unit=0) const
  {return (getTextureData(unit).texFunc);}

  virtual void        init(SoState *state);

  // Common Initialization. Directly called by the constructor.
  virtual void commonInit() ;

  virtual SbBool      matches(const SoElement *elt) const;

  virtual void        push(SoState *state);

  virtual SoElement   *copyMatchInfo() const;

  static void         initClass();

  static void         exitClass();

  virtual void        print(FILE *fp) const;

 protected:
  virtual             ~SoShapeStyleElement();

 private:
  int                 m_delayFlags; // True if rendering might be delayed
  SbBool              m_needNorms;

  // Texture Data for each texture unit
  struct SoTextureData {
    bool  texEnabled ;
    bool  tex3Enabled ;
    bool  texFunc ;

    // Constructor
    SoTextureData()
    {
      texEnabled = tex3Enabled = texFunc = false;
    }

    // equality operator
    friend int operator ==(const SoTextureData &texData1, const SoTextureData &texData2)
    { 
      return (texData1.texEnabled  == texData2.texEnabled &&
	            texData1.tex3Enabled == texData2.tex3Enabled &&
	            texData1.texFunc     == texData2.texFunc) ;
    }

    // !equality operator
    friend int operator !=(const SoTextureData &texData1, const SoTextureData &texData2)
    { return !(texData1 == texData2) ; }
  } ;
  

  SoTextureData& getTextureData( const int unit ) const;
  typedef std::vector<SoTextureData> SoTexDataList;
  mutable SoTexDataList m_texDataList;

  int                 m_renderCaseMask;
};

#ifdef WIN32
#pragma warning( pop )
#endif

#endif /* _SO_SHAPE_STYLE_ELEMENT */
