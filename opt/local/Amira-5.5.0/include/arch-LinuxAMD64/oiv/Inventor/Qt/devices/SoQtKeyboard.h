/*=======================================================================
** VSG_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Author      : David Mott (MMM yyyy)
** Modified by : Gavin Bell (MMM yyyy)
**=======================================================================*/


#ifndef  _SO_QT_KEYBOARD_
#define  _SO_QT_KEYBOARD_
#include <Inventor/Qt/OivQtCompat.h>
#include <Inventor/Qt/devices/SoQtDevice.h>
#include <Inventor/events/SoKeyboardEvent.h>

class QKeyEvent;

#define SO_QT_ALL_KEYBOARD_EVENTS (KeyPressMask | KeyReleaseMask)

/**
 * @VSGEXT Translates and reports events for the keyboard device.
 * 
 * @ingroup Qt
 * 
 * @DESCRIPTION
 *   This class manages events generated by the keyboard, including key press and
 *   release events (SoKeyboardEvent).
 * 
 * @SEE_ALSO
 *    SoQtDevice,
 *    SoKeyboardEvent
 * 
 * 
 */ 

class INVENTORQT_API SoQtKeyboard : public SoQtDevice {

  Q_OBJECT

    public:
  /**
   * Constructor. To the constructor, pass which keyboard events you
   * are interested in as a bitwise OR of the following values:
   * 
   * KeyPressMask - Key press messages
   * 
   * KeyReleaseMask - Key release messages
   * 
   * Or simply pass the defined value SO_QT_ALL_KEYBOARD_EVENTS for all keyboard
   * events. The device will only report events of this type for the widget it is
   * enabled on.
   */
  SoQtKeyboard(EventMask mask = SO_QT_ALL_KEYBOARD_EVENTS);
  /**
   * Destructor. 
   */
  ~SoQtKeyboard();
    
  // These functions enable/disable this device for the passed widget.
  // The callback function f will be invoked when events occur in w.
  // data is the clientData which will be passed.
  virtual void        enable(QWidget *w, XtEventHandler f, XtPointer data, void* unused=NULL);
  virtual void        disable(QWidget *w, XtEventHandler f, XtPointer data);
    
  //
  // Converts a Qt event into an SoEvent,
  // returning NULL if the event is not from this device.
  //
  virtual const SoEvent * translateEvent(QEvent *event);
  
 private:
  EventMask           eventMask;      // Q event interest for this device
  SoKeyboardEvent     *keyEvent;      // keyboard press or release
  SoKeyboardEvent *translateKeyEvent(QKeyEvent *ke, SoButtonEvent::State s);

  // Mapping from QT virtual keys to SoKeyboardEvent::Key enum
  static SoKeyboardEvent::Key keyMap[256];
  static SoKeyboardEvent::Key keyMap2[97];
  static int keyMapInitFlag;


};

#endif /* _SO_QT_KEYBOARD_ */


