/*=======================================================================
** SGI_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Author      : Thaddeus Beier (MMM yyyy)
** Modified by : Dave Immel (MMM yyyy)
** Modified by : Howard Look (MMM yyyy)
**=======================================================================*/
/*=======================================================================
** VSG_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Modified by : VSG (MMM YYYY)
**=======================================================================*/


#ifndef _SO_POINT_DETAIL_
#define _SO_POINT_DETAIL_

#include <Inventor/details/SoSubDetail.h>

//////////////////////////////////////////////////////////////////////////////
//
//  Class: SoPointDetail
//
//  Detail information about vertex-based shapes made of points. It
//  stores indices of various items that vary from point to point.
//
//////////////////////////////////////////////////////////////////////////////

/**
 * Stores detail information about vertex-based shapes made of points.
 * 
 * @ingroup details
 * 
 * @DESCRIPTION
 *   This class contains detail information about a point in a vertex-based shape
 *   made of points. It is used for returning information about an intersection with
 *   or primitives generated by a set of points. It is also used by SoFaceDetail and
 *   SoLineDetail to return information about the vertices of faces and line
 *   segments.
 * 
 * @SEE_ALSO
 *    SoDetail,
 *    SoPickedPoint,
 *    SoPrimitiveVertex,
 *    SoVertexShape,
 *    SoFaceDetail,
 *    SoLineDetail
 * 
 * 
 */ 

class INVENTOR_API SoPointDetail : public SoDetail {

  SO_DETAIL_HEADER(SoPointDetail);

 public:
  /**
   * Constructor.
   */
  SoPointDetail();
  /**
   * Destructor.
   */
  virtual ~SoPointDetail();

  /**
   * Returns the index of the point within the relevant coordinate node.
   */
  int32_t     getCoordinateIndex() const      { return coordIndex; }

  /**
   * Returns the index of the material for the point within the relevant material
   * node.
   */
  int32_t     getMaterialIndex() const        { return materialIndex; }
  /**
   * Returns the index of the surface normal at the point within the relevant normal
   * node. Note that if normals have been generated for a shape, the index may not be
   * into an existing normal node.
   */
  int32_t     getNormalIndex() const          { return normalIndex; }
  /**
   * Returns the index of the texture coordinates for the point within the relevant
   * normal node. Note that if texture coordinates have been generated for a shape,
   * the index may not be into an existing texture coordinate node.
   */
  int32_t     getTextureCoordIndex() const    { return texCoordIndex; }

  // Returns an instance that is a copy of this instance. The caller
  // is responsible for deleting the copy when done.
  virtual SoDetail *  copy() const;

 SoEXTENDER public:
  // Each of these sets one of the indices in the detail
  void        setCoordinateIndex(int32_t i)   { coordIndex    = i; }
  void        setMaterialIndex(int32_t i)     { materialIndex = i; }
  void        setNormalIndex(int32_t i)               { normalIndex   = i; }
  void        setTextureCoordIndex(int32_t i) { texCoordIndex = i; }

#if !defined(IV_STRICT) && !defined(__NUTC__)
  void      setCoordinateIndex(long i)                       // System long
    { setCoordinateIndex ((int32_t) i); }
  void      setMaterialIndex(long i)                         // System long
    { setMaterialIndex ((int32_t) i); }
  void      setNormalIndex(long i)                           // System long
    { setNormalIndex ((int32_t) i); }
  void      setTextureCoordIndex(long i)                     // System long
    { setTextureCoordIndex ((int32_t) i); }
#endif

 SoINTERNAL public:
  static void initClass();
  static void exitClass();

 private:
  int32_t     coordIndex, materialIndex, normalIndex, texCoordIndex;

};

#endif /* _SO_POINT_DETAIL_ */

