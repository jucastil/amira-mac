/*=======================================================================
** VSG_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Author      : VSG (MMM YYYY)
**=======================================================================*/



#ifndef  _SO_WIN_KEYBOARD_
#define  _SO_WIN_KEYBOARD_

#include <Inventor/Win/SoWinBeginStrict.h>
#include <windows.h>

#include <Inventor/Win/devices/SoWinDevice.h>
#include <Inventor/events/SoKeyboardEvent.h>

#define SO_WIN_ALL_KEYBOARD_EVENTS (KeyPressMask | KeyReleaseMask)

/**
 * @VSGEXT Translates and reports messages for the keyboard device.
 * 
 * @ingroup Win
 * 
 * @DESCRIPTION
 *   This class translates and manages messages generated by the keyboard, 
 *   including key press and release messages (SoKeyboardEvent).
 * 
 * @SEE_ALSO
 *    SoWinDevice,
 *    SoKeyboardEvent
 */ 

class INVENTORW_API SoWinKeyboard : public SoWinDevice {
 public:
  /**
   * Constructor. To the constructor, pass which keyboard messages you
   * are interested in as a bitwise OR of the following values:
   * 
   * KeyPressMask - Key press messages
   * 
   * KeyReleaseMask - Key release messages
   * 
   * Or simply pass the defined value SO_WIN_ALL_KEYBOARD_EVENTS for all keyboard
   * messages. The device will only report messages of this type for the window
   * handle it is enabled on.
   */
  SoWinKeyboard(EventMask mask = SO_WIN_ALL_KEYBOARD_EVENTS);
  /**
   * Destructor. 
   */
  ~SoWinKeyboard();
    
  // These functions enable/disable this device for the passed widget.
  // The callback function f will be invoked when events occur in w.
  // data is the clientData which will be passed.
  virtual void        enable(SoWidget w, XtEventHandler f,
                             XtPointer data, Window win = NULL);
  virtual void        disable(SoWidget w, XtEventHandler f, XtPointer data);
    
  //
  // Converts a Windows event into an SoEvent,
  // returning NULL if the event is not from this device.
  //
  virtual const SoEvent * translateEvent(XAnyEvent *xevent);
  
 private:
  EventMask           eventMask;      // X event interest for this device
  SoKeyboardEvent     *keyEvent;      // keyboard press or release

  SoKeyboardEvent     *translateKeyEvent(XKeyEvent *ke, SoButtonEvent::State s);

  // Mapping from _WIN32 virtual keys to SoKeyboardEvent::Key enum
  static SoKeyboardEvent::Key keyMap[256];
  static int keyMapInitFlag;

};

#include <Inventor/Win/SoWinEndStrict.h>

#endif /* _SO_WIN_KEYBOARD_ */

