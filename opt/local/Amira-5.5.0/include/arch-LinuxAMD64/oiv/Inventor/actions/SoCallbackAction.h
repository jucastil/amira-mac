/*=======================================================================
** SGI_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Author      : Dave Immel (MMM yyyy)
** Modified by : Thad Beier (MMM yyyy)
**=======================================================================*/
/*=======================================================================
** VSG_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Modified by : VSG (MMM YYYY)
**=======================================================================*/


#ifndef  _SO_CALLBACK_ACTION_
#define  _SO_CALLBACK_ACTION_

#include <Inventor/SbBox.h>
#include <Inventor/actions/SoSubAction.h>
#include <Inventor/nodes/SoComplexity.h>
#include <Inventor/nodes/SoDrawStyle.h>
#include <Inventor/nodes/SoFont.h>
#include <Inventor/nodes/SoLightModel.h>
#include <Inventor/nodes/SoMaterialBinding.h>
#include <Inventor/nodes/SoNormalBinding.h>
#include <Inventor/nodes/SoPickStyle.h>
#include <Inventor/nodes/SoShapeHints.h>
#include <Inventor/nodes/SoTexture.h>
#include <Inventor/nodes/SoTextureCoordinateBinding.h>
#include <Inventor/nodes/SoTransparencyType.h>
#include <Inventor/nodes/SoUnits.h>
#include <Inventor/elements/SoDecimationTypeElement.h>

class SoPrimitiveVertex;
class SoShape;
class SoTexture2Transform;

//
// Typedefs for callback routines used with the callbacks for
// generating primitives.
//
/**
 * [OIV-WRAPPER NAME{TriangleCB}]
 * [OIV-WRAPPER-ARG IN,IN,IN,IN,IN]
 */
typedef void SoTriangleCB(void *userData,
                          SoCallbackAction *action,
                          const SoPrimitiveVertex *v1,
                          const SoPrimitiveVertex *v2,
                          const SoPrimitiveVertex *v3);
/**
 * [OIV-WRAPPER NAME{LineSegmentCB}]
 * [OIV-WRAPPER-ARG IN,IN,IN,IN]
 */
typedef void SoLineSegmentCB(void *userData, 
                             SoCallbackAction *action,
                             const SoPrimitiveVertex *v1,
                             const SoPrimitiveVertex *v2);
/**
 * [OIV-WRAPPER NAME{PointCB}]
 * [OIV-WRAPPER-ARG IN,IN,IN]
 */
typedef void SoPointCB(void *userData, 
                       SoCallbackAction *action,
                       const SoPrimitiveVertex *v);

#ifdef _WIN32
//JSG - Changed SoCallbackActionCB back to how it is done under unix,
//SoCallbackActionCB2 is included for backward compatability on Windows
typedef int SoCallbackActionCB2(void *userData,
                                SoCallbackAction *action,
                                const SoNode *node);
#endif
//////////////////////////////////////////////////////////////////////////////
//
//  Class: SoCallbackAction
//
//  State accumulation action. This action performs a generic
//  traversal of a scene graph. The caller can register callback
//  functions to be called when specific types of nodes are traversed.
//
//////////////////////////////////////////////////////////////////////////////

/**
 * Performs a generic traversal of the scene graph.
 * 
 * @ingroup actions
 * 
 * @DESCRIPTION
 *   This action defines a generic traversal of the scene graph. The user can specify
 *   \oivnetdoc delegate methods \else callback functions \endoivnetdoc for node types or paths; when those node types or paths are
 *   encountered during traversal, the user's \oivnetdoc delegate method \else callback function \endoivnetdoc is called.
 *   
 *   In addition, \oivnetdoc delegate \else callback \endoivnetdoc functions can be registered for primitives generated by
 *   shapes in the scene graph. Most shape types can generate primitives that
 *   represent or approximate their geometries. @B Triangle @b primitives are used
 *   for all surfaces (such as cubes, face sets, or 3D text), @B line segment @b
 *   primitives are used for line shapes, and @B point @b primitives are used for
 *   point shapes. Note that the type of primitives generated for a shape is the
 *   same, regardless of drawing style or other properties.
 *   
 *   Most of the methods on this class access information from the traversal state.
 *   They should be called only by \oivnetdoc delegate \else callback \endoivnetdoc functions that are invoked during
 *   traversal, so there is a valid state to work with.
 * 
 * @SEE_ALSO
 *    SoCallback,
 *    SoEventCallback,
 *    SoShape
 * 
 * 
 */ 

class INVENTOR_API SoCallbackAction : public SoAction {

  SO_ACTION_HEADER(SoCallbackAction);

 public:

  /** Possible responses from a pre or post callback */
  enum Response {
    /**
     *  Continue traversal as if nothing happened 
     */
    CONTINUE,
    /**
     *  Abort traversal 
     */
    ABORT,
    /**
     *  Do not traverse node's children, but continue traversal 
     */
    PRUNE
  };

  /** The SoCallbackActionCB typedef is defined within the class, since
  * it needs to refer to the Response enumerated type.
  * The first argument is the data pointer that the user supplied
  * when the callback was registered. The second argument is the
  * action, from which the state can be extracted. The third
  * argument is the node that the callback is called from.  
  * [OIV-WRAPPER NAME{CallbackActionCB}]
  */
  typedef Response SoCallbackActionCB(void *userData,
                                      SoCallbackAction *action,
                                      const SoNode *node);

  /**
   * The constructor.
   */
  SoCallbackAction();

  // Destructor
#ifndef HIDDEN_FROM_DOC
  virtual ~SoCallbackAction();
#endif // HIDDEN_FROM_DOC

  //////////////////////////////////////////////////////////////////
  //
  // Adding callback functions:
  //

  /**
   * Adds a callback function to call when a node of the given type is
   * encountered during traversal. The PreCallback is called just before the node is
   * traversed, and the PostCallback is called just after. The value returned by a
   * callback function indicates whether the action should continue with the
   * traversal.
   */
  void addPreCallback(SoType type, SoCallbackActionCB *cb, void *data);

  /**
   * Adds a callback function to call when a node of the given type is
   * encountered during traversal. The PreCallback is called just before the node is
   * traversed, and the PostCallback is called just after. The value returned by a
   * callback function indicates whether the action should continue with the
   * traversal.
   */
  void addPostCallback(SoType type, SoCallbackActionCB *cb, void *data);

  /**
   * Sets up a callback function to call when the action is
   * applied to a path. This function is called just before the node at the
   * tail of the path is traversed.
   * [OIV-WRAPPER EVENT_NAME{PreTailTraversal},EVENT_INVOKE_METHOD{InvokePreTailEventDelegates}]
   */
  void addPreTailCallback(SoCallbackActionCB *cb, void *data);

  /**
   * Sets up a callback function to call when the action is
   * applied to a path. This function is called just after the node at the
   * tail of the path is traversed.
   * [OIV-WRAPPER EVENT_NAME{PostTailTraversal},EVENT_INVOKE_METHOD{InvokePostTailEventDelegates}]
   */
  void addPostTailCallback(SoCallbackActionCB *cb, void *data);

  /**
   * Routine to add callbacks for generated primitives (triangles)
   * for all shapes of the given type. The callback function will be
   * called for each triangle generated for all shapes of or derived from that type.
   */
  void addTriangleCallback(SoType type, SoTriangleCB *cb, void *data);

  /**
   * Routine to add callbacks for generated primitives (line segments)
   * for all shapes of the given type. The callback function will be
   * called for each line segment generated for all shapes of or derived
   * from that type.
   */
  void addLineSegmentCallback(SoType type, SoLineSegmentCB *cb, void *data);

  /**
   * Routine to add callbacks for generated primitives (points)
   * for all shapes of the given type. The callback function will be
   * called for each point generated for all shapes of or derived from that type.
   */
  void addPointCallback(SoType type, SoPointCB *cb, void *data);

  //////////////////////////////////////////////////////////////////
  //
  // Accessing state information from callbacks. Non-obvious return
  // values are documented.
  //

  //////////////////////// Complexity:
  /**
   * Returns complexity information from the state.
   */
  float getComplexity() const;

  /**
   * Returns complexity information from the state.
   */
  SoComplexity::Type getComplexityType() const;

  //////////////////////// Coordinates:
  /**
   * Returns the current coordinates from the state.
   */
  int32_t getNumCoordinates() const;

  /**
   * Returns the current coordinates from the state.
   */
  const SbVec3f &getCoordinate3(int index) const;

  /**
   * Returns the current coordinates from the state.
   */
  const SbVec4f &getCoordinate4(int index) const;

  /** 
   * Returns the current decimation type from the state.
   */
  SoDecimationTypeElement::Type getDecimationType() const;

  /** 
   * Returns the current decimation percentage from the state.
   */
  float getDecimationPercentage() const;

  /**
   * Returns the current drawing style information from the state.
   */
  SoDrawStyle::Style getDrawStyle() const;

  /**
   * Returns the current drawing style information from the state.
   */
  u_short getLinePattern() const;

  /** 
   * Returns the current drawing style information from the state.
   */
  int getLinePatternScaleFactor() const;

  /**
   * Returns the current drawing style information from the state.
   */
  float getLineWidth() const;

  /**
   * Returns the current drawing style information from the state.
   */
  float getPointSize() const;

  //////////////////////// Font:
  /**
   * Returns the current font information from the state.
   *
   */
  const SbString & getFontName() const;

  /**
   * Returns the current font information from the state.
   */
  float getFontSize() const;

  /**
   * Returns the current font information from the state.
   */
  SoFont::RenderStyle getFontRenderStyle() const;

  //////////////////////// Lighting:
  /**
   * Returns the current lighting model information from the state.
   */
  SoLightModel::Model getLightModel() const;

  /**
   * Returns the current lighting model information from the state.
   */
  const SbVec3f &getLightAttenuation() const;

  //////////////////////// Material:
  /**
   * Returns the current material information from the state. Providing a
   * @B mtlIndex @b will return the material defined for that index.
   * [OIVJAVA-WRAPPER PACK{Material}]
   */
  void getMaterial(SbColor &ambient,
                   SbColor &diffuse,
                   SbColor &specular,
                   SbColor &emission,
                   float &shininess,
                   float &transparency,
                   int mtlIndex = 0) const;

  /**
   * Returns the current material information from the state.
   */
  SoMaterialBinding::Binding getMaterialBinding() const;


  /**
   * Returns the current Transparency Type information from the state.
   */
  SoTransparencyType::TransparencyType getTransparencyType() const;

  //////////////////////// Normals:
  /**
   * Returns the current normal information from the state.
   */
  int32_t getNumNormals() const;

  /**
   * Returns the current normal information from the state.
   */
  const SbVec3f & getNormal(int index) const;

  /**
   * Returns the current normal information from the state.
   */
  SoNormalBinding::Binding getNormalBinding() const;

  //////////////////////// Profiles:
  /**
   * Returns the current profiles and their coordinates from the state.
   */
  int32_t getNumProfileCoordinates() const;

  /**
   * Returns the current profiles and their coordinates from the state.
   */
  const SbVec2f &getProfileCoordinate2(int index) const;

  /**
   * Returns the current profiles and their coordinates from the state.
   */
  const SbVec3f &getProfileCoordinate3(int index) const;

  /**
   * Returns the current profiles and their coordinates from the state.
   */
  const SoNodeList & getProfile() const;

  //////////////////////// Shape Hints:
  /**
   * Returns the current shape hints from the state.
   */
  SoShapeHints::VertexOrdering getVertexOrdering() const;

  /**
   * Returns the current shape hints from the state.
   */
  SoShapeHints::ShapeType getShapeType() const;

  /**
   * Returns the current shape hints from the state.
   */
  SoShapeHints::FaceType getFaceType() const;

  /**
   * Returns the current shape hints from the state.
   */
  float getCreaseAngle() const;

  //////////////////////// Textures:
  /**
   * Returns texture information from the state. getNumTextureCoordinates()
   * returns 0 if texture coordinates are generated by a function.
   */
  int32_t getNumTextureCoordinates() const;

  /**
   * Returns texture information from the state. 
   */
  const SbVec2f &getTextureCoordinate2(int index) const;

  /**
   * Returns texture information from the state. 
   */
  const SbVec4f &getTextureCoordinate4(int index) const;

  /**
   * Returns texture information from the state. 
   */
  SoTextureCoordinateBinding::Binding   getTextureCoordinateBinding() const;

#ifdef _WIN32
  /**
   * Returns texture information from the state. 
   */
  const SbColor getTextureBlendColor() const;
#else
  const SbColor &getTextureBlendColor() const;
#endif
  /**
   * Returns texture information from the state. 
   * getTextureImage() returns NULL if no texture is enabled.
   * [OIV-WRAPPER-RETURN-TYPE NAME{buffer},ARRAY{size.Value[0]*size.Value[1]*numComps}]
   * [OIVJAVA-WRAPPER PACK{TextureImage}]
   */
  const unsigned char *getTextureImage(SbVec2s &size,
                                       int &numComps) const;

  /**
   * Returns texture information from the state. 
   */
  const SbName &getTextureFileName() const;

  /**
   * Returns the current texture mapping information from the state.
   */
  const SbMatrix &getTextureMatrix() const;

  /**
   * Returns the current texture mapping information from the state.
   */
  const SoTexture2Transform *getTextureTransformNode() const;

  /**
   * Returns the current texture mapping information from the state.
   */
  SoTexture::Model getTextureModel() const;

  /**
   * Returns the current texture mapping information from the state.
   */
  SoTexture::Wrap getTextureWrapS() const;
  /**
   * Returns the current texture mapping information from the state.
   */
  SoTexture::Wrap getTextureWrapT() const;

  //////////////////////// Transformations:
  /**
   * Returns the current modeling transformation from the state.
   */
  const SbMatrix & getModelMatrix() const;

  /**
   * Returns the current units from the state.
   */
  SoUnits::Units getUnits() const;

  //////////////////////// Viewing:
  /**
   * Returns the current camera and viewing information from the state.
   */
  float getFocalDistance() const;

  /**
   * Returns the current camera and viewing information from the state.
   */
  const SbMatrix &getProjectionMatrix() const;

  /**
   * Returns the current camera and viewing information from the state.
   */
  const SbMatrix &getViewingMatrix() const;

  /**
   * Returns the current camera and viewing information from the state.
   */
  const SbViewVolume &getViewVolume() const;

  //////////////////////// Miscellaneous:
  /**
   * Returns the current picking style.
   */
  SoPickStyle::Style getPickStyle() const;

  /**
   * Returns the current switch value.
   */
  int32_t getSwitch() const;

  /**
   * Sets whether the callback uses normal traversal (switches, etc.)
   * or whether it traverses every single node. Default is FALSE.
   */
  void setCallbackAll(SbBool flag) { callbackAll = flag; }

  /**
   * Returns whether the callback uses normal traversal (switches, etc.)
   * or whether it traverses every single node. 
   */
  SbBool isCallbackAll() const  { return callbackAll; }

 SoEXTENDER public:
#ifdef _WIN32
  void addPreCallback(SoType type, SoCallbackActionCB2 *cb, void *data);
  void addPostCallback(SoType type, SoCallbackActionCB2 *cb, void *data);
  void addPreTailCallback(SoCallbackActionCB2 *cb, void *data);
  void addPostTailCallback(SoCallbackActionCB2 *cb, void *data);
#endif

  // Returns the current response
  Response getCurrentResponse() const { return response; }

  // Call the pre-callbacks and post-callbacks
  virtual void invokePreCallbacks(const SoNode *node);
  virtual void invokePostCallbacks(const SoNode *node);

  // Call the primitive callbacks
  virtual void invokeTriangleCallbacks(const SoShape *shape,
                               const SoPrimitiveVertex *v1,
                               const SoPrimitiveVertex *v2,
                               const SoPrimitiveVertex *v3);
  virtual void invokeLineSegmentCallbacks(const SoShape *shape,
                                  const SoPrimitiveVertex *v1,
                                  const SoPrimitiveVertex *v2);
  virtual void invokePointCallbacks(const SoShape *shape,
                            const SoPrimitiveVertex *v);

  // Should primitives be generated for this shape?
  virtual SbBool shouldGeneratePrimitives(const SoShape *shape) const;    

 SoINTERNAL public:

  // This flag is used by the SoSwitch etc. nodes which must return a
  // different result from its 'affectsState' method when called
  // during a CallbackAction that is doing the callback on all children.
  static SbBool duringCallbackAll;
  static void initClass();
  static void exitClass();
  
  // Returns the node that caused the callback:
  virtual SoNode *getCurPathTail();
  
  // Set the current node during traversal:
  void setCurrentNode(SoNode *node)
    { currentNode = node;} 

  void setStartTransparencyType(  SoTransparencyType::TransparencyType type) {
    transpType = type;
  };

 protected:
  // Initiates action on graph
  virtual void beginTraversal(SoNode *node);

  // Response from last callback
  Response response;

 private:
  SbBool callbackAll;   // Callback all children or follow
  // normal traversal rules.
  // Callback lists
  SbPList preCallbackList;
  SbPList postCallbackList;

  SbPList preTailCallbackList;
  SbPList postTailCallbackList;

  SbPList triangleCallbackList;
  SbPList lineSegmentCallbackList;
  SbPList pointCallbackList;

  // Node where the callback occurs:
  SoNode *currentNode;

  SoTransparencyType::TransparencyType transpType;     // Transparency quality type
};

#endif /* _SO_CALLBACK_ACTION_ */

