/*=======================================================================
** VSG_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Author      : T.MEHAMLI (Jul 2007)
**=======================================================================*/

#ifndef SO_WX_MOUSE
#define SO_WX_MOUSE

//////////////////////////////////////////////////////////////////////////////
//
//  Class: SoWxMouse
//
//////////////////////////////////////////////////////////////////////////////

#include <Inventor/Wx/devices/SoWxDevice.h>

#include <wx/event.h>
#include <Inventor/events/SoLocation2Event.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/events/SoMouseWheelEvent.h>

#define SO_WX_ALL_MOUSE_EVENTS \
    (ButtonPressMask | ButtonReleaseMask | \
     PointerMotionMask | ButtonMotionMask)

class wxMouseEvent;

/**
 * @VSGEXT Translates and reports events for the mouse device.
 * 
 * @ingroup Wx
 * 
 * @DESCRIPTION
 *   This class manages events generated by the mouse, including mouse motion
 *   (SoLocation2Event), and mouse button press and release events
 *   (SoMouseButtonEvent).
 * 
 * @SEE_ALSO
 *    SoWxDevice,
 *    SoLocation2Event,
 *    SoMouseButtonEvent
 *    SoMouseWheelEvent
 * 
 * 
 */ 

class INVENTORWX_API SoWxMouse : public SoWxDevice 
{

public:
  /**
   * Constructor. To the constructor, pass which mouse messages you
   * are interested in as a bitwise OR of the following values:
   * 
   * ButtonPressMask - Mouse down events
   * 
   * ButtonReleaseMask - Mouse up events
   * 
   * PointerMotionMask - Mouse motion with no buttons
   * 
   * ButtonMotionMask - Mouse motion with buttons pressed
   * 
   * Or simply pass the defined value SO_QT_ALL_MOUSE_EVENTS for all mouse events. The
   * device will only report events of this type for the window it is enabled on.
   */
  SoWxMouse( EventMask mask = SO_WX_ALL_MOUSE_EVENTS );

  /**
   * Destructor. 
   */
  ~SoWxMouse();
    
  // These functions enable/disable this device for the passed widget.
  // The callback function f will be invoked when events occur in w.
  // data is the clientData which will be passed.
  virtual void enable( wxWindow* w, XtEventHandler f, void* data, 
		       void* unused=NULL);
  virtual void disable( wxWindow* w, XtEventHandler f, void* data );
    
  //
  // Converts a wxEvent into an SoEvent,
  // returning NULL if the event is not from this device.
  //
  virtual const SoEvent* translateEvent( wxEvent& event );
  
 private:
  EventMask m_eventMask;      // wxEvent interest for this device
  SoLocation2Event* m_loc2Event;     // mouse motion
  SoMouseButtonEvent* m_buttonEvent;   // mouse button press
  SoMouseWheelEvent* m_mouseWheelEvent;

  SoLocation2Event* translateMotionEvent( wxMouseEvent& me );
  SoMouseButtonEvent* translateButtonEvent( wxMouseEvent& be, SoButtonEvent::State s );
  SoMouseWheelEvent* translateMouseWheelEvent( wxMouseEvent& we ); 
};

#endif // SO_WX_MOUSE


