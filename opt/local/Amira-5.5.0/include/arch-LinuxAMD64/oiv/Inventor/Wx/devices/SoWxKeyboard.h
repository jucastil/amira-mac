/*=======================================================================
** VSG_COPYRIGHT_TAG
**=======================================================================*/
/*=======================================================================
** Author      : T.MEHAMLI (Jul 2007)
**=======================================================================*/

#ifndef SO_WX_KEYBOARD
#define SO_WX_KEYBOARD

//////////////////////////////////////////////////////////////////////////////
//
//  Class: SoWxKeyboard
//
//////////////////////////////////////////////////////////////////////////////

#include <Inventor/Wx/devices/SoWxDevice.h>
#include <Inventor/events/SoKeyboardEvent.h>

#define SO_WX_ALL_KEYBOARD_EVENTS ( KeyPressMask | KeyReleaseMask )
#define WIN_NUM_KEYS 256
#define WX_EXTRA_KEYS 111

/**
 * @VSGEXT Translates and reports events for the keyboard device.
 * 
 * @ingroup Wx
 * 
 * @DESCRIPTION
 *   This class manages events generated by the keyboard, including key press and
 *   release events (SoKeyboardEvent).
 * 
 * @SEE_ALSO
 *    SoWxDevice,
 *    SoKeyboardEvent
 * 
 * 
 */ 

class INVENTORWX_API SoWxKeyboard : public SoWxDevice 
{
    public:
  /**
   * Constructor. To the constructor, pass which keyboard events you
   * are interested in as a bitwise OR of the following values:
   * 
   * KeyPressMask - Key press messages
   * 
   * KeyReleaseMask - Key release messages
   * 
   * Or simply pass the defined value SO_Wx_ALL_KEYBOARD_EVENTS for all keyboard
   * events. The device will only report events of this type for the widget it is
   * enabled on.
   */
  SoWxKeyboard( EventMask mask = SO_WX_ALL_KEYBOARD_EVENTS );

  /**
   * Destructor. 
   */
  ~SoWxKeyboard();
    
  // These functions enable/disable this device for the passed widget.
  // The callback function f will be invoked when events occur in w.
  // data is the clientData which will be passed.
  virtual void enable( wxWindow* w, XtEventHandler f, void* data, 
		       void* unused=NULL);
  virtual void disable( wxWindow* w, XtEventHandler f, void* data );
    
  //
  // Converts a wx event into an SoEvent,
  // returning NULL if the event is not from this device.
  //
  virtual const SoEvent* translateEvent( wxEvent& anEvent );
  
 private:
  EventMask m_eventMask;      // wxEvent interest for this device
  SoKeyboardEvent* m_keyEvent;      // keyboard press or release
  SoKeyboardEvent* translateKeyEvent( wxKeyEvent& ke, SoButtonEvent::State s );

  // Mapping from Wx virtual keys to SoKeyboardEvent::Key enum
  static SoKeyboardEvent::Key keyMap[WIN_NUM_KEYS];
  static SoKeyboardEvent::Key keyMap2[WX_EXTRA_KEYS];
  static int keyMapInitFlag;
};

#endif // SO_WX_KEYBOARD


