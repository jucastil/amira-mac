/* XML processor/application API for amf.dtd.
 * Generated 2007/03/15 11:04:14.
 *
 * This program was generated with the FleXML XML processor generator.
 * FleXML is Copyright (C) 1999-2005 Kristoffer Rose.  All rights reserved.
 * FleXML is Copyright (C) 2003-2006 Martin Quinson.  All rights reserved.
 * (Id: flexml.pl,v 1.61 2006/09/13 16:34:33 wdowling Exp).
 * 
 * There are two, intertwined parts to this program, part A and part B.
 *
 * Part A
 * ------
 * 
 * Some parts, here collectively called "Part A", are found in the 
 * FleXML package.  They are Copyright (C) 1999-2005 Kristoffer Rose
 * and Copyright (C) 2003-2006 Martin Quinson. All rights reserved.
 *
 * You can redistribute, use, perform, display and/or modify "Part A"
 * provided the following two conditions hold:
 *
 * 1. The program is distributed WITHOUT ANY WARRANTY from the author of
 *    FleXML; without even the implied warranty of MERCHANTABILITY or
 *    FITNESS FOR A PARTICULAR PURPOSE.
 *
 * 2. The program distribution conditions do not in any way affect the
 *    distribution conditions of the FleXML system used to generate this
 *    file or any version of FleXML derived from that system.
 *
 * Notice that these are explicit rights granted to you for files
 * generated by the FleXML system.  For your rights in connection with
 * the FleXML system itself please consult the GNU General Public License.
 * 
 * Part B
 * ------
 * 
 * The other parts, here collectively called "Part B", and which came 
 * from the DTD used by FleXML to generate this program, can be 
 * distributed (or not, as the case may be) under the terms of whoever
 * wrote them, provided these terms respect and obey the two conditions 
 * above under the heading "Part A".
 *
 * The author of and contributors to FleXML specifically disclaim
 * any copyright interest in "Part B", unless "Part B" was written 
 * by the author of or contributors to FleXML.
 * 
 */

#ifndef _FLEXML_amf_H
#define _FLEXML_amf_H

/* XML application entry points. */
extern void STag_AMF(void);
extern void ETag_AMF(void);
extern void STag_MOLTRAJECTORYBUNDLE(void);
extern void ETag_MOLTRAJECTORYBUNDLE(void);
extern void STag_MOLECULEBUNDLE(void);
extern void ETag_MOLECULEBUNDLE(void);
extern void STag_MOLTRAJECTORY(void);
extern void ETag_MOLTRAJECTORY(void);
extern void STag_MOLECULE(void);
extern void ETag_MOLECULE(void);
extern void STag_TOPOLOGY(void);
extern void ETag_TOPOLOGY(void);
extern void STag_LEVEL(void);
extern void ETag_LEVEL(void);
extern void STag_GROUPS(void);
extern void ETag_GROUPS(void);
extern void STag_ATTRIBUTE(void);
extern void ETag_ATTRIBUTE(void);
extern void STag_DATA(void);
extern void ETag_DATA(void);
extern void STag_COORDINATES(void);
extern void ETag_COORDINATES(void);
extern void STag_OBSERVABLE(void);
extern void ETag_OBSERVABLE(void);
extern void STag_SCALARFIELD3(void);
extern void ETag_SCALARFIELD3(void);

/* XML application data. */
typedef int AT_LEVEL_fixedgroupsize;
#define AU_LEVEL_fixedgroupsize NULL
typedef int AT_LEVEL_size;
#define AU_LEVEL_size NULL
typedef int AT_MOLTRAJECTORY_name;
#define AU_MOLTRAJECTORY_name NULL
typedef enum { AU_OBSERVABLE_type, A_OBSERVABLE_type_int32,A_OBSERVABLE_type_float } AT_OBSERVABLE_type;
typedef int AT_MOLTRAJECTORY_flags;
#define AU_MOLTRAJECTORY_flags NULL
typedef int AT_LEVEL_reflevel;
#define AU_LEVEL_reflevel NULL
typedef int AT_AMF_version;
#define AU_AMF_version NULL
typedef enum { AU_ATTRIBUTE_type, A_ATTRIBUTE_type_int32,A_ATTRIBUTE_type_float,A_ATTRIBUTE_type_string } AT_ATTRIBUTE_type;
typedef int AT_ATTRIBUTE_name;
#define AU_ATTRIBUTE_name NULL
typedef int AT_OBSERVABLE_name;
#define AU_OBSERVABLE_name NULL
typedef int AT_MOLECULEBUNDLE_name;
#define AU_MOLECULEBUNDLE_name NULL
typedef int AT_SCALARFIELD3_dims;
#define AU_SCALARFIELD3_dims NULL
typedef int AT_DATA_size;
#define AU_DATA_size NULL
typedef int AT_LEVEL_name;
#define AU_LEVEL_name NULL
typedef int AT_SCALARFIELD3_bbox;
#define AU_SCALARFIELD3_bbox NULL
typedef enum { AU_DATA_type, A_DATA_type_int32,A_DATA_type_float,A_DATA_type_string } AT_DATA_type;
typedef enum { AU_SCALARFIELD3_type, A_SCALARFIELD3_type_float } AT_SCALARFIELD3_type;
typedef int AT_MOLECULE_name;
#define AU_MOLECULE_name NULL
typedef int AT_MOLTRAJECTORY_size;
#define AU_MOLTRAJECTORY_size NULL
typedef int AT_SCALARFIELD3_name;
#define AU_SCALARFIELD3_name NULL
typedef int AT_MOLTRAJECTORYBUNDLE_name;
#define AU_MOLTRAJECTORYBUNDLE_name NULL
typedef int AT_DATA_name;
#define AU_DATA_name NULL

/* FleXML-provided data. */
extern int pcdata_ix;
extern char *bufferstack;
#define pcdata (bufferstack + pcdata_ix)
extern AT_LEVEL_fixedgroupsize AX_LEVEL_fixedgroupsize;
#define A_LEVEL_fixedgroupsize (bufferstack + AX_LEVEL_fixedgroupsize)
extern AT_LEVEL_size AX_LEVEL_size;
#define A_LEVEL_size (bufferstack + AX_LEVEL_size)
extern AT_MOLTRAJECTORY_name AX_MOLTRAJECTORY_name;
#define A_MOLTRAJECTORY_name (bufferstack + AX_MOLTRAJECTORY_name)
extern AT_OBSERVABLE_type AX_OBSERVABLE_type;
#define A_OBSERVABLE_type AX_OBSERVABLE_type
extern AT_MOLTRAJECTORY_flags AX_MOLTRAJECTORY_flags;
#define A_MOLTRAJECTORY_flags (bufferstack + AX_MOLTRAJECTORY_flags)
extern AT_LEVEL_reflevel AX_LEVEL_reflevel;
#define A_LEVEL_reflevel (bufferstack + AX_LEVEL_reflevel)
extern AT_AMF_version AX_AMF_version;
#define A_AMF_version (bufferstack + AX_AMF_version)
extern AT_ATTRIBUTE_type AX_ATTRIBUTE_type;
#define A_ATTRIBUTE_type AX_ATTRIBUTE_type
extern AT_ATTRIBUTE_name AX_ATTRIBUTE_name;
#define A_ATTRIBUTE_name (bufferstack + AX_ATTRIBUTE_name)
extern AT_OBSERVABLE_name AX_OBSERVABLE_name;
#define A_OBSERVABLE_name (bufferstack + AX_OBSERVABLE_name)
extern AT_MOLECULEBUNDLE_name AX_MOLECULEBUNDLE_name;
#define A_MOLECULEBUNDLE_name (bufferstack + AX_MOLECULEBUNDLE_name)
extern AT_SCALARFIELD3_dims AX_SCALARFIELD3_dims;
#define A_SCALARFIELD3_dims (bufferstack + AX_SCALARFIELD3_dims)
extern AT_DATA_size AX_DATA_size;
#define A_DATA_size (bufferstack + AX_DATA_size)
extern AT_LEVEL_name AX_LEVEL_name;
#define A_LEVEL_name (bufferstack + AX_LEVEL_name)
extern AT_SCALARFIELD3_bbox AX_SCALARFIELD3_bbox;
#define A_SCALARFIELD3_bbox (bufferstack + AX_SCALARFIELD3_bbox)
extern AT_DATA_type AX_DATA_type;
#define A_DATA_type AX_DATA_type
extern AT_SCALARFIELD3_type AX_SCALARFIELD3_type;
#define A_SCALARFIELD3_type AX_SCALARFIELD3_type
extern AT_MOLECULE_name AX_MOLECULE_name;
#define A_MOLECULE_name (bufferstack + AX_MOLECULE_name)
extern AT_MOLTRAJECTORY_size AX_MOLTRAJECTORY_size;
#define A_MOLTRAJECTORY_size (bufferstack + AX_MOLTRAJECTORY_size)
extern AT_SCALARFIELD3_name AX_SCALARFIELD3_name;
#define A_SCALARFIELD3_name (bufferstack + AX_SCALARFIELD3_name)
extern AT_MOLTRAJECTORYBUNDLE_name AX_MOLTRAJECTORYBUNDLE_name;
#define A_MOLTRAJECTORYBUNDLE_name (bufferstack + AX_MOLTRAJECTORYBUNDLE_name)
extern AT_DATA_name AX_DATA_name;
#define A_DATA_name (bufferstack + AX_DATA_name)

/* XML application utilities. */
extern int element_context(int);

/* XML processor entry point. */
extern int yylex(void);

/* Flexml error handling function (useful only when -q flag passed to flexml) */
const char * parse_err_msg(void);
#endif
