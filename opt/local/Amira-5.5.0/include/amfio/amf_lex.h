#define yy_create_buffer amf_yy_create_buffer
#define yy_delete_buffer amf_yy_delete_buffer
#define yy_scan_buffer amf_yy_scan_buffer
#define yy_scan_string amf_yy_scan_string
#define yy_scan_bytes amf_yy_scan_bytes
#define yy_flex_debug amf_yy_flex_debug
#define yy_init_buffer amf_yy_init_buffer
#define yy_flush_buffer amf_yy_flush_buffer
#define yy_load_buffer_state amf_yy_load_buffer_state
#define yy_switch_to_buffer amf_yy_switch_to_buffer
#define yyin amf_yyin
#define yyleng amf_yyleng
#define yylex amf_yylex
#define yyout amf_yyout
#define yyrestart amf_yyrestart
#define yytext amf_yytext

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 201
#define YY_END_OF_BUFFER 202
static yyconst short int yy_accept[1617] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  202,  200,   27,   10,   10,   27,
       27,  180,   10,  180,    5,    6,    5,    8,    9,    8,
      196,  188,  189,  197,  194,  197,  195,  199,  188,  189,

      199,  200,   33,   10,   33,   33,   33,   31,   33,   37,
       10,   37,   37,  200,   37,  200,   37,  200,   37,  200,
      200,   37,   43,   10,   43,   43,   43,   41,   43,   47,
       10,   47,   47,   53,   10,   53,   53,   53,   51,   53,
       57,   10,   57,   57,   67,   10,   67,   67,   67,   65,
       67,   67,   67,  200,   71,   10,   71,   71,  200,   71,
       77,   10,   77,   77,   77,   75,   77,   81,   10,   81,
       81,   85,   10,   85,   85,   85,   83,  200,   89,   10,
       89,   89,  200,   89,  101,   10,  101,  101,  101,   99,
      101,  101,  101,  101,  105,   10,  105,  105,  200,  105,

      200,  109,   10,  109,  109,  109,  107,  197,  196,  124,
       10,  124,  124,  124,  122,  124,  124,  197,  141,   10,
      141,  141,  141,  139,  141,  141,  141,  197,  200,  148,
       10,  148,  148,  148,  146,  197,  161,   10,  161,  161,
      161,  159,  161,  161,  197,  176,   10,  176,  176,  176,
      174,  176,  176,  176,  176,  197,   10,    0,    2,    2,
        0,    4,    7,  191,  190,    0,    0,    0,    0,    0,
        0,    0,   32,   34,   34,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   42,   44,   44,    0,   52,   54,
       54,    0,   66,   68,   68,   68,   68,    0,    0,    0,

        0,   76,   78,   78,    0,   84,   86,    0,    0,    0,
      100,  102,  102,  102,  102,  102,    0,    0,    0,  108,
      110,    0,    0,    0,  123,  125,  125,  125,    0,  140,
      142,  142,  142,  142,    0,  147,  149,    0,  160,  162,
      162,  162,    0,  175,  177,  177,  177,  177,  177,    0,
        0,    0,    0,    0,    3,    0,    0,    0,    0,    0,
        0,    0,  198,    0,   34,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   44,    0,    0,   54,    0,
        0,   68,   68,   68,    0,    0,    0,    0,    0,   78,
        0,    0,    0,    0,    0,    0,  102,  102,  102,  102,

        0,    0,    0,    0,    0,    0,    0,  193,  125,  125,
        0,    0,  142,  142,  142,    0,    0,    0,    0,  162,
      162,    0,    0,  177,  177,  177,  177,    0,    0,    0,
       26,    1,    0,    0,  186,    0,    0,    0,  183,  182,
        0,   28,   34,    0,    0,   36,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   44,    0,    0,   46,    0,
       54,    0,    0,   56,    0,   68,   68,   68,    0,    0,
        0,   70,    0,    0,    0,   78,    0,    0,   80,    0,
        0,    0,    0,   88,    0,    0,  102,  102,  102,  102,
        0,    0,  104,    0,    0,    0,    0,    0,    0,  112,

        0,  125,  125,    0,    0,  127,    0,  142,  142,  142,
        0,    0,  144,    0,    0,    0,  151,    0,  162,  162,
        0,    0,  164,    0,  177,  177,  177,  177,    0,    0,
      179,    0,    0,    0,  187,  181,    0,    0,   28,   34,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   68,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  128,  102,
        0,    0,  102,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       12,    0,  184,  185,   34,    0,   35,    0,    0,    0,
        0,    0,    0,    0,    0,   40,   39,    0,    0,   50,
       49,    0,    0,    0,    0,   60,   59,    0,   62,   61,
        0,    0,    0,    0,    0,   74,   73,    0,   90,    0,
      128,  102,    0,   92,   91,  102,    0,   94,   93,    0,
        0,    0,    0,    0,    0,  115,  114,    0,    0,    0,
        0,    0,  130,  129,    0,  138,  137,    0,    0,    0,
        0,    0,    0,  154,  153,    0,    0,    0,    0,    0,
      173,  172,    0,  171,  170,    0,  167,  166,    0,    0,

        0,    0,    0,    0,    0,   11,   34,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   64,   63,    0,
        0,    0,    0,    0,   90,    0,  102,  102,    0,    0,
      106,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  143,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  102,  102,    0,
      103,    0,  106,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   30,   29,   72,    0,    0,   72,    0,    0,    0,
        0,    0,   82,    0,    0,    0,    0,    0,  102,    0,
        0,    0,  192,    0,  111,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       72,    0,    0,    0,    0,    0,    0,    0,   82,    0,
        0,    0,    0,    0,  102,    0,   96,   95,  113,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  152,    0,   79,    0,   87,  102,  113,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      145,  152,  102,  119,  117,    0,  118,  116,    0,    0,
      126,  134,  132,    0,  133,  131,    0,    0,  158,  156,
      157,  155,    0,  169,  168,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      165,    0,    0,    0,    0,    0,  145,  102,  121,  120,
      136,  135,    0,    0,  163,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   58,  165,   58,    0,    0,    0,    0,  102,    0,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   48,   58,
        0,    0,    0,    0,    0,    0,    0,  178,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   48,    0,    0,    0,    0,   69,

        0,   98,   97,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   12,    0,   12,    0,
        0,    0,    0,   55,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   11,   38,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   45,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   16,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   22,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   24,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   20,    0,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   19,    0,
        0,    0,   18,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   17,    0,    0,   15,

        0,    0,    0,   21,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   13,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    8,    9,    1,
        1,    1,    1,    1,   10,   11,   12,   13,   13,   14,
       15,   13,   13,   13,   13,   13,   13,   16,   17,   18,
       19,   20,   21,    1,   22,   23,   24,   25,   26,   27,
       28,   16,   29,   30,   16,   31,   32,   33,   34,   35,
       16,   36,   37,   38,   39,   40,   16,   16,   41,   16,
       42,    1,   43,    1,   16,    1,   44,   45,   46,   47,

       48,   49,   50,   16,   51,   16,   16,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   16,   63,
       64,   65,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[66] =
    {   0,
        1,    2,    2,    2,    1,    1,    1,    1,    1,    3,
        3,    1,    4,    4,    4,    5,    1,    1,    1,    6,
        1,    7,    7,    7,    7,    7,    7,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    7,    7,    7,    7,    7,    7,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5
    } ;

static yyconst short int yy_base[1693] =
    {   0,
        0,    0,    0,    3,    6,    9,   12,   29,   16,   19,
       14,   17,   33,   36,   49,   55,   45,   61,   66,   72,
      104,  166,   75,   78,   83,  124,  127,  130,  133,  136,
      186,  189,  192,  195,  198,  215,  218,  221,  227,  238,
      244,  247,  250,  255,  267,  272,  275,  278,  284,  295,
      301,  304,  307,  312,  324,  329,  347,  401,  367,  370,
      373,  376,  379,  421,  424,  427,  430,  433,  455,  509,
      475,  478,  481,  484,  487,  529,  532,  535,  538,  541,
      563,  622,  583,  586,  589,  592,  595,  642,  645,  648,
      651,  654,  671,  675,  680,  683,  701,  755,  721,  724,

      727,  730,  733,  775,  778,  781,  809,  852,  784,  787,
      829,  832,  872,  875,  878,  881,  884,  901,  904,  907,
      910,  913,  930,  933,  951, 1010,  971,  974,  977,  980,
      983, 1030, 1033, 1036, 1039, 1042, 1059, 1063, 1081, 1124,
     1103, 1144, 1101, 1147, 1187, 1247, 1160, 1166, 1153, 1157,
     1307, 1367, 1220, 1228, 1208, 1215, 1427, 1470, 1280, 1288,
     1275, 1330, 1513, 1573, 1400, 1449, 1333, 1336, 1633, 1693,
     1492, 1546,    0,    0, 4829, 4830, 4830,   95,  153,   29,
       41, 4830,  156,   51, 4830, 4830, 4818, 4830, 4830, 4807,
     4830, 4822, 4822, 1065, 4830, 4830, 4830, 4830, 4820, 4820,

     4779,  222, 4830,  159, 4801,    0,  144, 4830, 4772, 4830,
      332, 1385, 1531,  262, 1591,  918, 1592, 1265, 1386, 1324,
     1325,  279, 4830,  335, 4799,    0,  296, 4830, 4774, 4830,
      341, 1384,  597, 4830,  396, 4797,    0,  319, 4830, 4772,
     4830,  450, 1539,  985, 4830,  504, 4795,    0,  541, 4830,
     4762, 4769, 4761,  733, 4830,  612, 1390, 1536, 1378, 1222,
     4830,  617, 4791,    0,  675, 4830, 4766, 4830,  688, 1444,
     1264, 4830,  804, 4789,    0,  820, 4830, 1541, 4830,  835,
     1481, 1652,  919, 1282, 4830,  840, 4788,    0,  921, 4830,
     4756, 4762, 4757, 4753, 4830,  943, 1597, 1609,  986, 1596,

     1050, 4830, 1000, 4783,    0,  922, 4830, 1644, 4759, 4830,
     1071, 4781,    0, 1092, 4830, 4756, 4735, 1650, 4830, 1177,
     4778,    0, 1216, 4830, 4753, 4745, 4731, 1658, 1336, 4830,
     1211, 4774,    0, 1337, 4830, 1669, 4830, 1270, 4773,    0,
     1338, 4830, 4748, 4727, 1704, 4830, 1278, 4770,    0, 1342,
     4830, 4744, 4737, 4743, 4722, 1710, 1390,   18, 4722, 4830,
     4774, 4763, 4830, 4830, 4830, 1445,   36, 4722, 4721, 4719,
     4759, 4746, 4830,    0, 4719, 4754, 4741, 4750, 4739, 4738,
     4737, 4736, 4735, 4734, 4830,    0, 4714, 4734, 4830,    0,
     4712, 4732, 4830,    0, 4719, 4709, 4696, 4726, 4727, 4724,

     4734, 4830,    0, 4703, 4723, 4830,    0, 4728, 4715, 4730,
     4830,    0, 4688, 4697, 4700, 4683, 4716, 4708, 4709, 4830,
        0,   61, 4716, 4723, 4830,    0, 4689, 4685, 4718, 4830,
        0, 4686, 4673, 4681, 4711, 4830,    0, 4711, 4830,    0,
     4681, 4677, 4698, 4830,    0, 4676, 4677, 4676, 4672, 4690,
     4706, 4715,  130, 4671, 4830, 1449,    0, 4667, 4667, 4704,
     4703, 4664, 4830, 4691, 4658, 1664, 1717, 4685, 4693, 4683,
     4682, 4681, 4680, 4679, 4678, 4660, 1724, 1730, 4659, 1739,
     1752, 4656, 4657, 4656, 4668, 1758, 1763, 4668, 4664, 4652,
     1767, 1771, 4659, 1778, 1786, 4660, 4649, 4648, 4643, 4646,

     1790, 1797, 4655, 4658, 4667, 1805, 1809, 4830, 4642, 4641,
     1812, 1824, 4640, 4639, 4638, 1831, 1834, 1837, 1844, 4637,
     4636, 1856, 1863, 4620, 4623, 4633, 4632, 1867, 1870, 4659,
     4830, 4830,   71, 4626, 4830, 4660, 4659, 4616, 4830, 4830,
     4614, 1495, 4622, 1877, 1889, 4830, 1896,  115, 4641,  177,
     4645,  188, 4632, 4643, 4630, 1603, 1899, 1902, 4830, 1908,
     1800, 1911, 1922, 4830, 1930, 4608, 1933, 1941, 4632, 1944,
     1951, 4830, 1954, 4629, 4638, 1963, 1966, 1973, 4830, 1976,
     4637, 1985, 1988, 4830, 1995, 4640, 4614, 1998, 4612, 2007,
     2016, 2019, 4830, 2025, 4623, 4619, 4632, 2029, 2038, 4830,

     2044, 2048, 2051, 2057, 2069, 4830, 2072, 2077, 2080, 2083,
     2091, 2101, 4830, 2104, 2110, 2113, 4830, 2116, 2124, 2135,
     2142, 2145, 4830, 2149, 2153, 2156, 2164, 2174, 2177, 2185,
     4830, 2188,   82, 2192, 4830, 4830, 4639, 4638, 1501, 4599,
     2196, 4629, 4616, 4629, 4626, 4625, 4612, 4611, 2199, 1536,
     2217, 2220, 2223, 2231, 2239, 2242, 2250, 2245, 2263, 4615,
     2271, 4620, 4608, 2274, 2277, 2285, 4612, 2292, 1596, 4592,
     2295, 2298, 4579, 2313, 2316, 2325, 4611, 4604, 4616, 2332,
     2335, 2338, 2346, 2353, 2364, 2370, 2373, 2383, 2388, 2401,
     2404, 2412, 2415, 2419, 2422, 2437, 2440, 2450, 2455, 2458,

     2469, 2475, 2483, 2487, 2495, 2501, 2509,  191, 4617, 2513,
     4830, 4616, 4830, 4830, 4581, 2516, 4830, 4595, 4611, 4596,
     4592, 4591, 4607, 4606, 2519, 4830, 4830, 2528, 2535, 4830,
     4830, 2543, 2547, 2550, 2567, 4830, 4830, 2575, 4830, 4830,
     4593, 2583, 4597, 4585, 2586, 4830, 4830, 2594, 1656, 2597,
     2010, 4566, 2602, 4830, 4830, 4575, 2618, 4830, 4830, 2627,
     4599, 4584, 4582, 2630, 2633, 4830, 4830, 2642, 1059, 1510,
     2650, 2653, 4830, 4830, 2665, 4830, 4830, 2674, 1804, 1826,
     2682, 2685, 2688, 4830, 4830, 2697,  186,  212, 2705, 2709,
     4830, 4830, 2717, 4830, 4830, 2725, 4830, 4830, 2733, 4570,

     4569, 2741, 1138,   40,  186, 4830, 2745, 4586, 4586, 4588,
     4583, 4582, 4582, 4581, 2748, 2751, 2756, 4830, 4830, 4582,
     2771, 4576, 4586, 2774, 2777, 2780, 4552, 4554, 2783, 4566,
     2793, 4582, 2802, 4551, 4548, 4541, 4548, 4545, 4538, 2805,
     4417, 4414, 4398, 4403, 4398, 4389, 2813, 4830, 2816, 4394,
     4389, 4388, 4383, 2827, 4382, 4379, 2838,  240,  192,  124,
     2808, 2846, 4402, 4399, 4393, 4393, 4386, 4381, 4376, 2857,
     2860, 4356, 2866, 4370, 4364, 2869, 2879, 4321, 2890, 2899,
     4830, 4339, 2902, 4330, 2908, 4312, 4302, 4299, 4297, 4098,
     4099, 2911, 4101, 4095, 4096, 4098, 4089, 4090, 2914, 4092,

     4084, 4082, 4072, 2918, 4074, 4015, 2921, 2933,  505,  541,
     2940, 4830, 4830, 2952, 4045, 3976, 2955, 3957, 3943, 3928,
     2958, 2961, 2964, 2968, 3913, 3856, 2987, 2994, 3783, 2997,
     3000, 3790, 4830, 3008, 4830, 3687, 3695, 3641, 3625, 3618,
     3569, 3016, 3490, 3518, 3476, 3431, 3457, 3416, 3019, 3406,
     3429, 3380, 3384, 3022, 3333, 3305, 3027, 3055,  591,  244,
     3030, 3291, 3220, 3225, 3198, 3175, 3046, 3049, 3058, 3061,
     3185, 3165, 3092, 3095, 3126, 3098, 4830, 4830, 3106, 3115,
     3092, 3037, 3030, 3026, 2973, 3114, 2925, 2968, 2926, 2879,
     2915, 2844, 3117, 2835, 2842, 2738, 2758, 3121, 2657, 2656,

     3124, 1038, 1120,    3, 1517,  292, 1152,  269,  372, 1205,
      366,  639, 2649, 2626, 2616, 2604, 2581, 3127, 3154, 3157,
     2489, 3160, 3164, 4830, 3167, 4830, 2450, 3176, 2488, 2469,
     2405, 2402, 2374, 2283, 3179, 2264, 2256, 2167, 2164, 2161,
     2082, 3186, 2125, 2060, 1953, 1909, 3194, 1882, 1875, 3198,
      420,  303, 1381,  650, 1652,  677,  364,   46,  472, 1200,
      309,  641, 1827, 1794, 1770, 1715, 1656, 3201, 3205, 3213,
     3220, 3224, 1626, 4830, 4830, 1683, 4830, 4830, 1679, 3228,
     4830, 4830, 4830, 1560, 4830, 4830, 1549, 3237, 4830, 4830,
     4830, 4830, 3240, 4830, 4830, 3247, 3250, 1575, 1590,  481,

      829,  367, 1719,  528,  418, 1743,  421, 3259, 1424, 1413,
     3262, 1410, 1359, 3273, 3278, 3281, 3284, 1254, 4830, 4830,
     4830, 4830, 3287, 3292, 4830, 3311, 3302,  123,  475, 3316,
     1474,  721,  426, 1649, 1710,  535,  772, 3321, 3325, 3344,
     1218, 3331, 3353, 3356, 1219, 3359, 3363, 3366, 3369, 3372,
     4830, 3378,  538,  726,  775, 3393,  235, 3399,  881,  826,
      878, 1732, 1848, 3402, 3406, 3414, 3434, 3477, 3387, 3425,
     1041, 3445, 3467, 3454, 3488, 3457, 3497, 4830,  901,  910,
      720,  947, 3501, 3506,  869, 1275, 1027,  774, 1092, 3509,
     1901, 1335, 3543, 3586, 3429, 1046, 3520, 3533, 3554, 4830,

     3563, 4830, 4830, 1202, 1491, 1094, 1759, 3576, 1641,  642,
      871,  727, 1156, 1801, 1921,  300,  990, 1344,  883, 3579,
      775, 3606, 3612, 4830, 1030, 1157, 1527, 1738, 1802, 2103,
     3615, 1280, 1430, 1393, 3620,  693,  528,  495, 3639,  315,
     3642,  909, 3645, 1481, 1697, 2191, 1811, 3648, 1709, 1900,
     1698, 1764, 3651,  185,   74, 3670, 3673, 3676, 2194, 1600,
     1943, 1798, 1876, 1332, 1939, 3679,  583, 1888, 4830, 3528,
     3700, 3703, 1910, 3712, 3715, 1869, 1952, 2248,  820, 2089,
     3725, 1405, 2286, 3573, 3734, 1255, 2018, 2293, 3737, 3740,
     1963, 3748, 1986, 1830, 1984, 1996, 3761, 2144, 3767, 4830,

      647, 2015, 2270, 2049, 2078, 2141, 3773, 3776, 2037, 2071,
     3786, 2323, 3795, 2109, 1133, 1196, 2189, 2326, 2081, 2121,
     3798, 2186, 2216, 2024, 3808, 3817, 2243, 2272, 2143, 2068,
     1929, 1983, 2218, 2283, 2304, 2344, 2368, 2389, 2151, 2187,
     3820, 3823, 2358, 2251, 2375, 2361, 3827,  979, 2311, 3831,
     2410, 2023, 2350, 2376, 2427, 2417, 2443, 3846, 2407, 2445,
     2425, 2463, 2486, 3855, 2448, 2449, 3865, 2523, 2480, 2515,
     2545, 2560, 2563, 2571, 2514, 2582, 2573, 2522, 2349, 3842,
     2587, 2596, 2605, 2646, 2675, 2652, 2694, 3874, 2552, 2603,
     2653, 2713, 2710, 2720, 2736, 2746, 2623, 2655, 2678, 3877,

     2803, 2749, 2768, 2726, 2548, 2781, 2804, 3886, 2806, 2818,
     2831, 2932, 2772, 2824, 2817, 2826, 2859, 2856, 3896, 2888,
     2907, 3899, 2877, 2925, 3905, 2956, 2966, 2949, 3023, 3062,
     2834, 2870, 2913, 2997, 3026, 2972, 3094, 3056, 3908, 3911,
     3018, 3058, 3918, 3102, 3122, 3930, 4830, 3125, 3128, 3123,
     3133, 3933, 3126, 3172, 3129, 3225, 3190, 3226, 3937, 3940,
     3131, 2988, 3035, 3248, 3277, 3290, 3291, 3296, 3331, 3054,
     3251, 3952, 4830, 3249, 3405, 3959, 3134, 3239, 3962, 3288,
     3367, 3425, 3373, 3453, 3332, 3486, 3282, 3468, 3482, 3494,
     3505, 3591, 3971, 3974, 4830, 3521, 3550, 3581, 3592, 3518,

     3607, 2957, 3610, 3611, 3614, 3617, 3644, 3650, 3664, 3674,
     3675, 3678, 3981, 4830, 3680, 3564, 3636, 3713, 3704, 3710,
     3112, 3601, 3688, 3736, 3747, 3766, 3764, 3785, 3774, 3735,
     3793, 3984, 3816, 3821, 3797, 3852, 3864, 3714, 3871, 3949,
     3950, 3996, 4003, 3961, 3970, 4007, 4830, 3862, 3906, 3972,
     3973, 4010, 3836, 3783, 3885, 3969, 4022, 4830, 4029, 4830,
     4015, 3884, 3975, 3998, 3983, 3995, 4044, 4034, 4014, 4019,
     4054, 4008, 4020, 4024, 4031, 3794, 3903, 4073, 4830, 4053,
     4032, 4079, 4830, 4040, 4042, 4059, 4075, 4043, 4047, 4088,
     4066, 4085, 4099, 3909, 3910, 4107, 4830, 4110, 4113, 4830,

     4077, 4087, 4118, 4830, 4084, 4098, 4065, 4086, 4103, 4104,
     4120, 4119, 4132, 4139, 4830, 4830, 4159, 4166, 4173, 4180,
     4187, 4194, 4201, 4208, 4215, 4222, 4229, 4236, 4243, 4250,
     4257, 4264, 4271, 4278, 4285, 4292, 4299, 4306, 4313, 4320,
     4327, 4334, 4341, 4346, 4351, 4356, 4361, 4366, 4371, 4376,
     4381, 4386, 4391, 4396, 4401, 4406, 4413, 4416, 4419, 4422,
     4425, 4428, 4431, 4434, 4437, 4440, 4443, 4446, 4449, 4452,
     4459, 4463, 4469, 4475, 4481, 4487, 4493, 4499, 4505, 4511,
     4517, 4523, 4529, 4535, 4541, 4548, 4555, 4562, 4569, 4576,
     4583, 4590

    } ;

static yyconst short int yy_def[1693] =
    {   0,
     1617, 1617, 1618, 1618, 1618, 1618, 1619, 1619, 1620, 1620,
     1621, 1621, 1622, 1622, 1622, 1622, 1623, 1623, 1617, 1617,
     1624, 1624, 1625, 1625, 1625, 1625, 1617, 1617, 1625, 1625,
     1625, 1625, 1617, 1617, 1625, 1625, 1625, 1625, 1617, 1617,
     1625, 1625, 1625, 1625, 1617, 1617, 1625, 1625, 1617, 1617,
     1625, 1625, 1625, 1625, 1617, 1617, 1626, 1626, 1627, 1627,
     1617, 1617, 1627, 1627, 1627, 1627, 1617, 1617, 1628, 1628,
     1629, 1629, 1617, 1617, 1629, 1629, 1629, 1629, 1617, 1617,
     1630, 1630, 1617, 1617, 1631, 1631, 1631, 1631, 1617, 1617,
     1631, 1631, 1631, 1631, 1617, 1617, 1632, 1632, 1617, 1617,

     1633, 1633, 1633, 1633, 1617, 1617, 1634, 1634, 1617, 1617,
     1635, 1635, 1617, 1617, 1635, 1635, 1617, 1617, 1635, 1635,
     1635, 1635, 1617, 1617, 1636, 1636, 1637, 1637, 1637, 1637,
     1617, 1617, 1637, 1637, 1637, 1637, 1617, 1617, 1638, 1638,
     1622, 1622, 1617, 1617, 1639, 1639, 1622, 1622, 1617, 1617,
     1640, 1640, 1622, 1622, 1617, 1617, 1641, 1641, 1622, 1622,
     1617, 1617, 1642, 1642, 1622, 1622, 1617, 1617, 1643, 1643,
     1622, 1622, 1617, 1617, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,

     1616, 1616, 1616, 1616, 1616, 1644, 1616, 1616, 1644, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1645, 1616, 1616, 1645, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1646, 1616, 1616, 1646,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1647, 1616, 1616,
     1647, 1647, 1647, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1648, 1616, 1616, 1648, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1649, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1650, 1616, 1616,
     1650, 1650, 1650, 1650, 1616, 1616, 1616, 1616, 1616, 1616,

     1616, 1616, 1616, 1616, 1651, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1652, 1616, 1616, 1652, 1652, 1616, 1616, 1616,
     1616, 1653, 1616, 1616, 1653, 1653, 1653, 1616, 1616, 1616,
     1616, 1616, 1654, 1616, 1616, 1616, 1616, 1616, 1616, 1655,
     1616, 1616, 1655, 1655, 1616, 1616, 1616, 1616, 1656, 1616,
     1616, 1656, 1656, 1656, 1656, 1616, 1616, 1657, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1644, 1644, 1658, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1645, 1645, 1659, 1616, 1646,
     1646, 1660, 1616, 1647, 1647, 1647, 1647, 1616, 1661, 1616,

     1616, 1616, 1648, 1648, 1662, 1616, 1649, 1616, 1663, 1616,
     1616, 1650, 1650, 1650, 1650, 1650, 1664, 1616, 1616, 1616,
     1651, 1616, 1665, 1616, 1616, 1652, 1652, 1652, 1666, 1616,
     1653, 1653, 1653, 1653, 1667, 1616, 1654, 1668, 1616, 1655,
     1655, 1655, 1669, 1616, 1656, 1656, 1656, 1656, 1656, 1670,
     1671, 1616, 1671, 1616, 1616, 1616, 1672, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1644, 1673, 1673, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1645, 1674, 1674, 1646, 1675,
     1675, 1647, 1647, 1647, 1616, 1676, 1676, 1616, 1616, 1648,
     1677, 1677, 1616, 1678, 1678, 1616, 1650, 1650, 1650, 1650,

     1679, 1679, 1616, 1616, 1616, 1680, 1680, 1616, 1652, 1652,
     1681, 1681, 1653, 1653, 1653, 1682, 1682, 1683, 1683, 1655,
     1655, 1684, 1684, 1656, 1656, 1656, 1656, 1685, 1685, 1671,
     1616, 1616, 1671, 1616, 1616, 1672, 1616, 1616, 1616, 1616,
     1616, 1616, 1644, 1616, 1673, 1616, 1673, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1645, 1616, 1674, 1616, 1674,
     1646, 1616, 1675, 1616, 1675, 1647, 1647, 1647, 1616, 1616,
     1676, 1616, 1676, 1616, 1616, 1648, 1616, 1677, 1616, 1677,
     1616, 1616, 1678, 1616, 1678, 1616, 1650, 1650, 1650, 1650,
     1616, 1679, 1616, 1679, 1616, 1616, 1616, 1616, 1680, 1616,

     1680, 1652, 1652, 1616, 1681, 1616, 1681, 1653, 1653, 1653,
     1616, 1682, 1616, 1682, 1616, 1683, 1616, 1683, 1655, 1655,
     1616, 1684, 1616, 1684, 1656, 1656, 1656, 1656, 1616, 1685,
     1616, 1685, 1671, 1686, 1616, 1616, 1616, 1616, 1616, 1644,
     1673, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1674, 1616, 1616, 1675, 1647, 1616, 1616, 1616, 1616, 1616,
     1676, 1616, 1616, 1616, 1616, 1677, 1616, 1678, 1616, 1650,
     1616, 1616, 1650, 1616, 1616, 1679, 1616, 1616, 1616, 1680,
     1616, 1616, 1616, 1616, 1681, 1616, 1616, 1616, 1616, 1616,
     1616, 1682, 1683, 1616, 1616, 1616, 1616, 1684, 1616, 1616,

     1616, 1616, 1616, 1616, 1616, 1616, 1685, 1671, 1686, 1686,
     1616, 1686, 1616, 1616, 1644, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1674, 1616, 1616,
     1616, 1675, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1676, 1616, 1616, 1616, 1616, 1616, 1677, 1616, 1678,
     1616, 1650, 1616, 1616, 1616, 1650, 1616, 1616, 1616, 1679,
     1616, 1616, 1616, 1680, 1616, 1616, 1616, 1616, 1616, 1616,
     1681, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1682, 1683, 1616, 1616, 1616, 1616, 1616, 1616, 1684, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,

     1616, 1685, 1671, 1686, 1686, 1616, 1644, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1674, 1675, 1616, 1616, 1616, 1616,
     1676, 1616, 1616, 1677, 1616, 1678, 1650, 1650, 1679, 1616,
     1616, 1616, 1680, 1616, 1616, 1616, 1616, 1616, 1616, 1681,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1683, 1616,
     1616, 1616, 1616, 1684, 1616, 1616, 1685, 1671, 1686, 1686,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1674,
     1675, 1616, 1676, 1616, 1616, 1677, 1678, 1650, 1650, 1616,
     1616, 1616, 1616, 1616, 1680, 1616, 1616, 1616, 1616, 1616,
     1616, 1681, 1616, 1616, 1616, 1616, 1616, 1616, 1683, 1616,

     1616, 1616, 1616, 1684, 1616, 1616, 1685, 1671, 1686, 1686,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1674, 1675, 1616, 1676, 1616, 1616, 1677, 1678, 1650, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1681, 1616, 1616, 1616, 1616, 1616, 1616, 1683, 1616,
     1616, 1616, 1616, 1684, 1616, 1616, 1685, 1671, 1686, 1686,
     1616, 1616, 1616, 1616, 1616, 1616, 1674, 1675, 1616, 1676,
     1616, 1616, 1677, 1678, 1650, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1681, 1616, 1616, 1616, 1616,
     1616, 1616, 1683, 1616, 1616, 1616, 1616, 1684, 1616, 1616,

     1685, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1686, 1686, 1616, 1616, 1616, 1616, 1616, 1674, 1675, 1676,
     1616, 1616, 1616, 1616, 1616, 1616, 1650, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1681, 1616, 1616, 1616, 1616, 1616,
     1616, 1683, 1616, 1616, 1616, 1616, 1684, 1616, 1616, 1685,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1686, 1686, 1616, 1616, 1616, 1616, 1616, 1674, 1675, 1676,
     1616, 1616, 1650, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1683, 1616, 1616,
     1616, 1616, 1684, 1616, 1616, 1685, 1671, 1671, 1671, 1671,

     1671, 1671, 1671, 1671, 1671, 1671, 1686, 1686, 1616, 1616,
     1616, 1616, 1616, 1674, 1675, 1676, 1616, 1650, 1616, 1616,
     1616, 1616, 1683, 1616, 1616, 1685, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1686, 1686, 1686,
     1616, 1616, 1616, 1616, 1616, 1674, 1675, 1676, 1650, 1616,
     1616, 1685, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1686, 1686, 1686, 1687, 1688, 1616, 1616,
     1616, 1674, 1675, 1676, 1616, 1616, 1616, 1616, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1686,
     1689, 1690, 1687, 1688, 1616, 1616, 1674, 1675, 1616, 1616,

     1616, 1616, 1616, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1689, 1686, 1691, 1690, 1692, 1686,
     1616, 1674, 1616, 1616, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1691, 1616, 1692, 1686, 1616,
     1674, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1616, 1616, 1674, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1616, 1616,
     1674, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1616, 1674, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1616, 1616,

     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,

     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1616, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1616, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1616, 1671, 1671, 1671, 1671, 1671,

     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1616, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1616, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1616, 1671, 1616,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1616, 1671,
     1671, 1671, 1616, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1616, 1671, 1671, 1616,

     1671, 1671, 1671, 1616, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1671, 1616,    0, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616

    } ;

static yyconst short int yy_nxt[4896] =
    {   0,
     1616,  178,  179,  178,  178,  179,  178,  178,  179,  178,
      178,  179,  178,  183,  179,  183,  189,  180,  186,  189,
      180,  186,  531,  181, 1054,  187,  181,  452,  187,  184,
      183,  179,  183,  358,  190,  192,  193,  190,  192,  193,
      194,  195,  453,  194,  195,  358,  184,  199,  200,  359,
      196,  192,  193,  196,  197,  361,  194,  192,  193,  711,
      197,  360,  194,  199,  200,  531,  196,  179,  179,  179,
      452,  360,  196,  179,  179,  179,  211,  179,  211,  211,
      179,  211, 1104,  202,  211,  179,  211,  201,  458,  202,
      531,  459,  212,  859,  633,  212,  357,  357,  357, 1270,

      213,  531,  505,  201,  203,  204,  179,  204,  203,  203,
      203,  203,  203,  203,  203,  205,  203,  203,  203,  708,
      203,  207,  203,  208,  203,  211,  179,  211,  179,  179,
      179,  179,  179,  179,  211,  179,  211,  211,  179,  211,
      642,  213,  531,  711,  214,  203,  203,  214,  361,  531,
      212, 1154,  643,  212,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  533,  360,  209,  203,  204,  179,  204,
      203,  203,  203,  203,  203,  203,  203,  205,  203,  203,
      203,  910,  203,  207,  203,  208,  203,  211,  179,  211,
      211,  179,  211,  179,  179,  179,  179,  179,  179,  211,

      179,  211,  645,  215, 1269,  711,  215,  203,  203,  216,
      531,  711,  216,  645,  643,  213,  211,  179,  211,  211,
      179,  211,  211,  179,  211,  647,  361,  209,  179,  179,
      179,  803,  213,  860,  850,  217,  851,  909,  217,  179,
      179,  179,  360,  372,  218,  211,  179,  211,  211,  179,
      211,  211,  179,  211,  531,  218,  211,  179,  211,  531,
      852,  215,  853,  711,  215,  908,  361,  219,  179,  179,
      179, 1183,  219,  179,  179,  179,  211,  179,  211,  211,
      179,  211,  360,  361,  220,  179,  179,  179,  531,  220,
      376, 1058,  217,  380, 1012,  217,  179,  179,  179,  360,

      361,  221,  211,  179,  211,  211,  179,  211,  211,  179,
      211,  531,  221,  211,  179,  211,  360, 1056,  219,  711,
      712,  219,  531,  361,  222,  179,  179,  179,  711,  222,
      179,  179,  179,  357,  357,  357,  357,  357,  357,  360,
     1098,  216,  357,  357,  357, 1255,  216,  223,  224,  179,
      224,  223,  223,  223,  223,  223,  223,  223,  225,  223,
      223,  223, 1107,  223,  227,  223,  228,  223,  231,  179,
      231,  231,  179,  231,  179,  179,  179,  179,  179,  179,
      231,  179,  231,  531,  232,  711,  531,  232,  223,  223,
      218,  531, 1132,  218, 1103, 1059,  232,  357,  357,  357,

      229,  223,  224,  179,  224,  223,  223,  223,  223,  223,
      223,  223,  225,  223,  223,  223, 1061,  223,  227,  223,
      228,  223,  231,  179,  231,  231,  179,  231,  231,  179,
      231,  179,  179,  179,  179,  179,  179,  531,  232,  531,
      711,  233,  223,  223,  233,  531, 1097,  214, 1136, 1159,
      214,  357,  357,  357,  229,  234,  235,  179,  235,  234,
      234,  234,  234,  234,  234,  234,  236,  234,  234,  234,
     1138,  234,  238,  234,  239,  234,  242,  179,  242,  242,
      179,  242,  179,  179,  179,  179,  179,  179,  242,  179,
      242,  531,  243, 1105,  531,  243,  234,  234,  220, 1155,

      531,  220, 1130, 1237,  243,  357,  357,  357,  240,  234,
      235,  179,  235,  234,  234,  234,  234,  234,  234,  234,
      236,  234,  234,  234,  711,  234,  238,  234,  239,  234,
      242,  179,  242,  242,  179,  242,  242,  179,  242,  179,
      179,  179,  179,  179,  179,  361,  243,  531, 1254,  244,
      234,  234,  244, 1135,  531,  218, 1162,  531,  218,  959,
      711,  360,  240,  245,  246,  179,  246,  245,  245,  245,
      245,  245,  245,  245,  247,  245,  245,  245, 1179,  245,
      249,  245,  250,  245,  179,  179,  179,  179,  179,  179,
      256,  179,  256,  256,  179,  256,  256,  179,  256,  960,

      254,  361,  531,  254,  245,  245,  257, 1282,  388,  257,
      711,  251,  258,  357,  357,  357,  252,  360,  357,  357,
      357,  253,  245,  246,  179,  246,  245,  245,  245,  245,
      245,  245,  245,  247,  245,  245,  245, 1011,  245,  249,
      245,  250,  245,  256,  179,  256,  179,  179,  179,  179,
      179,  179,  256,  179,  256,  256,  179,  256,  711,  258,
      711,  531,  259,  245,  245,  259,  531, 1231,  258,  531,
      251,  258,  256,  179,  256,  252,  256,  179,  256,  361,
      253,  179,  179,  179,  179,  179,  179, 1100,  260,  357,
      357,  357,  260, 1062, 1108,  360,  531,  220, 1237, 1315,

      220,  261,  262,  179,  262,  261,  261,  261,  261,  261,
      261,  261,  263,  261,  261,  261, 1102,  261,  265,  261,
      266,  261,  179,  179,  179,  179,  179,  179,  269,  179,
      269,  269,  179,  269,  269,  179,  269,  361,  254,  531,
      531,  254,  261,  261,  270,  531,  531,  270, 1180, 1233,
      271, 1158, 1206,  360,  267,  261,  262,  179,  262,  261,
      261,  261,  261,  261,  261,  261,  263,  261,  261,  261,
      398,  261,  265,  261,  266,  261,  269,  179,  269,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  531,  271,  531,  531,  254,  261,  261,  254, 1240,

     1213,  278, 1163, 1181,  278,  357,  357,  357,  267,  272,
      273,  179,  273,  272,  272,  272,  272,  272,  272,  272,
      274,  272,  272,  272,  361,  272,  276,  272,  277,  272,
      280,  179,  280,  280,  179,  280,  357,  357,  357,  531,
      360,  357,  357,  357, 1294,  531,  281, 1186,  531,  281,
      272,  272,  272,  273,  179,  273,  272,  272,  272,  272,
      272,  272,  272,  274,  272,  272,  272, 1131,  272,  276,
      272,  277,  272,  179,  179,  179,  179,  179,  179,  280,
      179,  280,  280,  179,  280,  179,  179,  179,  531,  278,
      531, 1237,  278,  272,  272,  282, 1232,  531,  282, 1210,

      531,  283,  179,  179,  179,  280,  179,  280,  280,  179,
      280,  280,  179,  280,  280,  179,  280, 1187,  283, 1185,
      531,  281,  361,  361,  281,  361,  361,  284,  531,  531,
      284,  179,  179,  179,  179,  179,  179, 1204,  360,  360,
     1257,  360,  360,  410,  357,  357,  357,  278, 1205,  382,
      278,  285,  286,  179,  286,  285,  285,  285,  285,  285,
      285,  285,  287,  285,  285,  285,  531,  285,  289,  285,
      290,  285,  296,  179,  296,  296,  179,  296,  296,  179,
      296,  296,  179,  296,  179,  179,  179, 1207,  297,  361,
      361,  297,  285,  285,  298, 1237,  392,  298,  531,  291,

      299,  357,  357,  357,  292,  360,  360,  418,  293,  294,
      285,  286,  179,  286,  285,  285,  285,  285,  285,  285,
      285,  287,  285,  285,  285, 1365,  285,  289,  285,  290,
      285,  179,  179,  179,  296,  179,  296,  296,  179,  296,
      296,  179,  296,  296,  179,  296,  531,  299, 1212,  531,
      298,  285,  285,  298,  361, 1242,  300,  531,  291,  300,
      179,  179,  179,  292,  179,  179,  179,  293,  294, 1051,
      360,  366,  357,  357,  357, 1052,  301,  419, 1221, 1196,
      301,  302,  303,  179,  303,  302,  302,  302,  302,  302,
      302,  302,  304,  302,  302,  302,  361,  302,  306,  302,

      307,  302,  179,  179,  179,  192,  193,  834,  367,  835,
      194,  531,  360,  531,  368, 1227,  369,  836,  299, 1214,
      308,  370,  302,  302,  302,  303,  179,  303,  302,  302,
      302,  302,  302,  302,  302,  304,  302,  302,  302,  531,
      302,  306,  302,  307,  302,  309,  192,  193,  179,  179,
      179,  194,  531, 1053,  179,  179,  179,  531,  179,  179,
      179,  308,  192,  193,  299,  302,  302,  194,  192,  193,
      283,  531,  858,  194,  283,  531,  531,  318,  357,  357,
      357, 1331, 1243,  318, 1234, 1057,  309,  310,  311,  179,
      311,  310,  310,  310,  310,  310,  310,  310,  312,  310,

      310,  310,  309,  310,  314,  310,  315,  310,  309,  179,
      179,  179,  357,  357,  357,  531,  179,  179,  179,  531,
      361,  531,  192,  193,  531,  329,  361,  194,  310,  310,
      192,  193,  329,  399, 1106,  194,  360,  328, 1060, 1225,
      316, 1171,  360, 1169, 1332,  328,  317,  310,  311,  179,
      311,  310,  310,  310,  310,  310,  310,  310,  312,  310,
      310,  310,  309,  310,  314,  310,  315,  310,  361,  361,
      309,  357,  357,  357,  531,  405,  179,  179,  179,  357,
      357,  357,  192,  193,  360,  360,  361,  194,  310,  310,
      192,  193,  259,  409,  531,  194,  384,  336, 1301,  531,

      316, 1149,  360, 1250, 1211,  336,  317,  319,  320,  179,
      320,  319,  319,  319,  319,  319,  319,  319,  321,  319,
      319,  319,  309,  319,  323,  319,  324,  319,  361,  361,
      309,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      361,  361,  361, 1216,  360,  360,  361,  259,  319,  319,
      221,  531, 1216,  221, 1219,  383,  360,  360,  360,  400,
      325,  378,  360, 1219, 1279,  326,  327,  319,  320,  179,
      320,  319,  319,  319,  319,  319,  319,  319,  321,  319,
      319,  319,  361,  319,  323,  319,  324,  319,  361,  361,
      361,  357,  357,  357,  361,  388,  376,  376,  360, 1145,

      531,  399,  192,  193,  360,  360,  360,  194,  319,  319,
      360,  401,  531,  400, 1099,  384,  377,  345, 1252, 1297,
      325,  378,  378,  401,  531,  326,  327,  330,  331,  179,
      331,  330,  330,  330,  330,  330,  330,  330,  332,  330,
      330,  330,  309,  330,  334,  330,  335,  330,  361,  531,
     1144,  192,  193, 1142, 1141,  405,  194,  456,  456,  456,
     1251,  456,  456,  456,  360,  535,  345,  400,  330,  330,
      330,  331,  179,  331,  330,  330,  330,  330,  330,  330,
      330,  332,  330,  330,  330,  361,  330,  334,  330,  335,
      330,  309,  409,  531,  192,  193,  639,  639,  639,  194,

      531,  360,  639,  639,  639,  410, 1259,  457, 1157,  356,
      531,  330,  330,  337,  338,  179,  338,  337,  337,  337,
      337,  337,  337,  337,  339,  337,  337,  337, 1226,  337,
      341,  337,  342,  337,  309,  361,  531,  725,  725,  725,
      361,  726,  376,  361,  727,  361,  531,  399,  192,  193,
      392,  360, 1055,  194,  337,  337,  360, 1122,  837,  360,
      838,  360,  379,  356, 1244, 1121,  343,  378,  839,  401,
      383,  408,  344,  337,  338,  179,  338,  337,  337,  337,
      337,  337,  337,  337,  339,  337,  337,  337,  309,  337,
      341,  337,  342,  337,  531,  361,  361,  751,  751,  751,

      361,  361,  376,  376,  649,  649,  649,  417,  417,  531,
     1128,  360,  360,  361,  337,  337,  360,  360,  418,  531,
      417,  650,  381,  383,  419, 1129,  343,  378,  378,  360,
      418, 1275,  344,  346,  347,  179,  347,  346,  346,  346,
      346,  346,  346,  346,  348,  346,  346,  346,  422,  346,
      350,  346,  351,  346,  422,  423,  361,  825,  825,  825,
      531,  429,  422,  409,  360,  544,  544,  544,  531,  435,
      360,  531,  360,  422,  346,  346,  410,  352,  360,  353,
      438, 1230,  408,  546, 1160, 1101,  354, 1120, 1119,  360,
     1118, 1113,  355,  346,  347,  179,  347,  346,  346,  346,

      346,  346,  346,  346,  348,  346,  346,  346,  422,  346,
      350,  346,  351,  346,  422,  443,  531,  531,  544,  544,
      544,  450, 1260, 1266,  360,  557,  557,  557,  531,  531,
      360,  557,  557,  557,  346,  346,  546,  352,  531,  353,
      562,  562,  562,  559, 1133, 1161,  354, 1264,  547,  559,
     1112,  531,  355,  562,  562,  562, 1134,  531,  564,  570,
      570,  570,  531,  560,  570,  570,  570, 1188,  577,  577,
      577,  564,  577,  577,  577, 1245, 1137,  572,  531,  582,
      582,  582,  572,  531, 1111,  565,  579,  582,  582,  582,
      579,  591,  591,  591, 1267, 1228,  573,  584,  591,  591,

      591,  652,  652,  652,  580,  584,  598,  598,  598,  593,
      598,  598,  598,  604,  604,  604,  593,  531,  653,  585,
      531,  531,  594, 1277,  600,  604,  604,  604,  600, 1110,
      531,  606,  611,  611,  611,  611,  611,  611,  615,  615,
      615, 1235, 1246,  606,  601,  615,  615,  615, 1262,  531,
      613, 1109,  841,  613,  842,  614,  617,  621,  621,  621,
     1310,  607,  843,  617,  621,  621,  621,  531,  629,  629,
      629,  629,  629,  629,  844,  623,  845,  618,  544,  544,
      544, 1189,  623, 1095,  846,  624,  631, 1094,  531,  631,
      544,  544,  544,  632, 1291,  531,  546,  544,  544,  544,

      557,  557,  557,  557,  557,  557, 1216,  531,  546,  557,
      557,  557,  562,  562,  562,  546, 1278, 1092,  559,  531,
     1217,  559,  641,  562,  562,  562, 1216,  559, 1283,  531,
      564,  562,  562,  562,  656,  656,  656, 1265,  651, 1348,
     1217,  564,  658,  658,  658,  570,  570,  570,  531,  564,
     1288,  657,  570,  570,  570,  570,  570,  570,  531,  659,
      654, 1091,  531,  572,  664,  664,  664,  577,  577,  577,
      572,  531, 1280,  572,  577,  577,  577,  577,  577,  577,
     1276,  665,  531, 1292,  661,  579,  582,  582,  582,  582,
      582,  582,  579, 1349, 1307,  579,  582,  582,  582,  671,

      671,  671,  531,  531,  584,  531,  666,  584,  674,  674,
      674,  751,  751,  751,  584,  531,  672,  591,  591,  591,
      591,  591,  591, 1309, 1311,  675,  591,  591,  591,  668,
      598,  598,  598, 1369,  531,  593, 1312,  531,  593,  598,
      598,  598,  531,  531,  593,  598,  598,  598,  600,  681,
      681,  681,  683,  683,  683, 1341,  531,  600,  604,  604,
      604, 1302, 1324,  600,  676, 1090,  682, 1316,  531,  684,
      604,  604,  604,  604,  604,  604,  606,  680,  686,  686,
      686,  688,  688,  688,  690,  690,  690,  531,  606, 1318,
      531,  606,  611,  611,  611,  687, 1325,  531,  689, 1347,

      531,  691,  611,  611,  611,  611,  611,  611,  531,  685,
      613,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      613, 1319,  531,  613, 1295,  694,  694,  694,  531,  617,
     1089, 1087,  617, 1335, 1330,  617,  696,  696,  696, 1247,
      531,  692,  695,  621,  621,  621,  621,  621,  621,  693,
      621,  621,  621,  697,  699,  699,  699,  701,  701,  701,
      531,  623,  531,  531,  623,  703,  703,  703,  623, 1086,
      531,  700, 1085, 1336,  702,  705,  705,  705,  629,  629,
      629, 1314,  704, 1346, 1320,  698,  629,  629,  629,  629,
      629,  629,  706,  710,  710,  710,  631,  716,  716,  716,

      649,  649,  649, 1356,  631,  531,  531,  631,  531,  707,
      531,  711,  712,  531, 1333,  717, 1084,  650,  557,  557,
      557,  652,  652,  652,  729,  729,  729, 1261,  730, 1339,
     1274,  731,  562,  562,  562,  531,  559,  531,  653, 1357,
      733,  733,  733,  656,  656,  656,  658,  658,  658, 1350,
      564,  735,  735,  735,  728,  736,  732,  734,  737, 1340,
      657, 1083,  531,  659,  738,  738,  738,  531,  739, 1082,
      531,  740,  570,  570,  570,  664,  664,  664,  745,  745,
      745, 1344,  746, 1361, 1293,  747,  577,  577,  577,  531,
      572,  531,  665,  582,  582,  582,  671,  671,  671,  753,

      753,  753,  531,  754,  579,  531,  755, 1317,  742, 1345,
      748,  584,  531,  672,  674,  674,  674,  757,  757,  757,
     1351,  758, 1298,  531,  759,  750,  591,  591,  591, 1303,
      531,  675, 1079,  598,  598,  598,  681,  681,  681,  765,
      765,  765,  531,  766,  593,  531,  767,  683,  683,  683,
      760,  600, 1352,  682,  768,  768,  768, 1366,  769, 1328,
     1370,  770, 1334,  531,  684,  604,  604,  604,  531,  531,
      764,  686,  686,  686,  772,  772,  772,  531,  773, 1399,
      531,  774, 1078,  606,  688,  688,  688,  531,  687,  775,
      775,  775, 1353,  776,  531,  531,  777, 1363, 1360,  771,

     1362,  689,  690,  690,  690,  778,  778,  778,  531,  779,
     1077, 1354,  780,  611,  611,  611,  615,  615,  615,  691,
      694,  694,  694,  783,  783,  783,  531,  784, 1371,  531,
      785,  613, 1355,  781,  617, 1368,  531,  695,  696,  696,
      696,  786,  786,  786,  531,  787,  531, 1377,  788, 1379,
      782,  621,  621,  621, 1076,  697,  699,  699,  699,  790,
      790,  790,  531,  791,  531, 1373,  792,  531,  531,  623,
      701,  701,  701,  700, 1075,  789,  793,  793,  793, 1372,
      794, 1378,  531,  795,  703,  703,  703,  702,  796,  796,
      796, 1374,  797, 1074, 1380,  798,  705,  705,  705,  531,

     1073,  704,  799,  799,  799,  531,  800, 1384, 1385,  801,
      629,  629,  629,  706,  710,  710,  710,  716,  716,  716,
      725,  725,  725, 1381,  726, 1071, 1389,  727,  631,  557,
      557,  557,  711,  531,  531,  717,  729,  729,  729,  802,
      730,  531,  531,  731,  562,  562,  562,  559,  733,  733,
      733,  817,  817,  817, 1388,  818, 1425, 1395,  819, 1398,
      804, 1390,  564,  815,  531,  734,  816,  531,  735,  735,
      735,  531,  736, 1393,  805,  737,  738,  738,  738,  531,
      739, 1394,  531,  740,  570,  570,  570,  745,  745,  745,
      531,  746,  531, 1391,  747,  577,  577,  577,  582,  582,

      582,  531,  572,  753,  753,  753,  531,  754, 1392, 1397,
      755, 1409, 1401,  579, 1067,  531,  584,  824,  821,  757,
      757,  757,  531,  758,  531, 1396,  759,  826,  591,  591,
      591,  598,  598,  598,  765,  765,  765, 1066,  766, 1402,
     1065,  767,  531,  768,  768,  768,  593,  769, 1403,  600,
      770,  604,  604,  604,  772,  772,  772,  829,  773, 1064,
     1417,  774, 1410, 1411,  833,  531,  775,  775,  775,  606,
      776,  531,  531,  777,  531,  778,  778,  778,  840,  779,
     1418, 1063,  780,  847,  847,  847,  615,  615,  615,  783,
      783,  783, 1404,  784,  531, 1406,  785,  531,  786,  786,

      786,  848,  787, 1419,  617,  788,  621,  621,  621,  849,
      790,  790,  790,  531,  791, 1049, 1048,  792,  793,  793,
      793, 1405,  794, 1412,  623,  795,  796,  796,  796,  531,
      797, 1425,  531,  798,  799,  799,  799, 1407,  800,  531,
      854,  801,  629,  629,  629,  531,  861,  861,  861,  557,
      557,  557,  562,  562,  562,  531, 1413,  817,  817,  817,
      631,  818,  857,  862,  819,  531, 1414,  559,  531,  870,
      564, 1046,  570,  570,  570,  577,  577,  577,  825,  825,
      825,  582,  582,  582,  880,  880,  880,  531, 1415,  871,
      572,  531,  873,  579,  883,  883,  883, 1045, 1416,  584,

      531, 1423,  881,  598,  598,  598,  604,  604,  604,  861,
      861,  861,  876,  877,  847,  847,  847,  615,  615,  615,
     1424,  600,  531,  531,  606,  531,  862,  892,  621,  621,
      621, 1434,  848, 1426, 1422,  617,  531,  531,  885,  629,
      629,  629, 1452,  531,  899,  531,  623,  911,  911,  911,
      531,  912, 1430,  531,  913, 1044, 1427,  631,  557,  557,
      557,  562,  562,  562, 1431, 1436,  904,  570,  570,  570,
      577,  577,  577,  907, 1437,  531,  559, 1432,  531,  564,
      582,  582,  582, 1435, 1438,  572,  921, 1439,  579,  531,
      922,  930,  930,  930, 1043,  924,  531, 1041,  584,  927,

      880,  880,  880,  883,  883,  883,  928,  531,  931,  934,
      934,  934,  604,  604,  604,  615,  615,  615,  881,  621,
      621,  621,  629,  629,  629, 1444,  531,  935, 1040, 1453,
      606, 1441,  531,  617,  958,  958,  958,  623, 1039,  954,
      631,  911,  911,  911,  531,  912,  949,  957,  913,  942,
     1442,  531,  531,  961,  961,  961,  961,  961,  961,  557,
      557,  557,  562,  562,  562,  969,  969,  969,  531,  570,
      570,  570, 1454, 1445,  962,  531,  531,  559, 1433, 1038,
      564, 1037, 1457,  967, 1036,  531,  968,  572,  577,  577,
      577,  531, 1450,  970, 1521,  582,  582,  582,  930,  930,

      930,  976,  976,  976, 1448,  977,  579,  531,  978,  934,
      934,  934,  973,  584, 1449,  931,  531,  604,  604,  604,
      615,  615,  615,  621,  621,  621, 1034,  935,  629,  629,
      629,  961,  961,  961,  974,  606, 1483,  531,  617, 1033,
      993,  623,  531, 1455,  998,  531,  631,  557,  557,  557,
      562,  562,  562,  986,  531, 1001,  958,  958,  958,  969,
      969,  969,  570,  570,  570,  559, 1451, 1452,  564, 1018,
     1462, 1019, 1456,  531,  531,  531, 1002,  531, 1003, 1004,
      572,  531, 1005, 1484, 1020, 1006, 1007, 1459, 1008, 1032,
     1031, 1009, 1010, 1023, 1023, 1023, 1025, 1025, 1025,  976,

      976,  976, 1491,  977, 1458, 1030,  978, 1028, 1028, 1028,
     1463, 1024, 1466,  531, 1026,  604,  604,  604,  615,  615,
      615,  531,  621,  621,  621,  629,  629,  629,  557,  557,
      557,  531, 1467,  606, 1476, 1468,  617, 1537, 1469, 1035,
      623,  531,  531,  631,  531,  531,  559,  531,  531, 1050,
      531, 1047,  531,  531, 1042,  562,  562,  562,  570,  570,
      570, 1072, 1072, 1072, 1068, 1023, 1023, 1023, 1025, 1025,
     1025, 1482, 1474,  564, 1029, 1470,  572, 1028, 1028, 1028,
     1080, 1080, 1080, 1024, 1027, 1471, 1026,  615,  615,  615,
     1022,  531, 1069, 1496, 1070,  621,  621,  621, 1081,  629,

      629,  629,  557,  557,  557,  617,  562,  562,  562,  531,
     1021, 1088, 1017,  623,  570,  570,  570,  631, 1475, 1093,
      559, 1117, 1117, 1117,  564, 1072, 1072, 1072, 1096, 1080,
     1080, 1080,  572, 1476, 1114, 1016, 1477, 1115,  615,  615,
      615, 1124, 1124, 1124,  531,  531, 1116, 1081,  629,  629,
      629, 1127, 1127, 1127, 1493, 1015,  617, 1014,  531, 1125,
     1139, 1139, 1139, 1143, 1143, 1143,  631,  531,  531,  531,
      531, 1126, 1478, 1123,  557,  557,  557, 1140,  711,  562,
      562,  562,  570,  570,  570, 1117, 1117, 1117, 1150, 1150,
     1150, 1485,  559, 1124, 1124, 1124,  531,  564, 1497, 1492,

      572,  531, 1147, 1127, 1127, 1127, 1151,  531, 1146,  531,
      531, 1125,  629,  629,  629,  531, 1148, 1156, 1156, 1156,
     1486,  531, 1164, 1164, 1164, 1152, 1139, 1139, 1139, 1013,
      631, 1500, 1170, 1170, 1170,  531, 1487, 1488, 1153, 1165,
      711, 1507, 1489, 1140,  711, 1166, 1166, 1166, 1000, 1167,
      531,  531, 1168, 1171, 1143, 1143, 1143, 1170, 1170, 1170,
      557,  557,  557,  711,  562,  562,  562,  570,  570,  570,
     1175, 1175, 1175, 1150, 1150, 1150,  999, 1490,  559, 1177,
     1177, 1177,  564, 1503, 1505,  572,  531, 1176, 1195, 1195,
     1195, 1151,  531, 1173, 1156, 1156, 1156, 1178,  997, 1172,

     1184, 1184, 1184, 1164, 1164, 1164, 1174, 1190, 1190, 1190,
     1501, 1191,  531, 1493, 1192, 1166, 1166, 1166,  531, 1167,
     1165,  711, 1168,  996,  531,  711, 1170, 1170, 1170, 1182,
     1195, 1195, 1195,  711,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  995,  531,  709,  557,  557,  557,  994,
      709,  709,  709,  711,  709, 1199, 1199, 1199, 1201, 1201,
     1201, 1502, 1202, 1504,  559, 1203,  992, 1197,  562,  562,
      562,  991,  531, 1200,  990,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  564,  531,  709, 1175,
     1175, 1175, 1198,  709,  709,  709,  711,  709, 1177, 1177,

     1177,  531, 1208, 1208, 1208,  531, 1176, 1184, 1184, 1184,
     1190, 1190, 1190,  531, 1191, 1511, 1178, 1192,  709,  709,
      531,  557,  557,  557,  531,  531,  989, 1508,  711, 1284,
     1284, 1284,  988,  987, 1223, 1223, 1223,  531, 1506,  559,
      531, 1509, 1209,  709,  709,  709,  709,  709, 1220,  709,
      709,  709, 1224, 1510,  709, 1199, 1199, 1199, 1222,  709,
      709,  709,  711,  709, 1201, 1201, 1201, 1515, 1202,  531,
     1519, 1203, 1532, 1200, 1284, 1284, 1284, 1208, 1208, 1208,
     1239, 1239, 1239,  531,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709, 1220,  531, 1516,  709,  711,  712,

      531, 1512,  709,  709,  709,  711,  709,  557,  557,  557,
      531,  531, 1229, 1223, 1223, 1223, 1248, 1248, 1248,  985,
      531, 1253, 1253, 1253, 1517,  559,  531,  709,  709,  531,
      531, 1224,  984,  531,  531, 1518,  531, 1249, 1241,  531,
     1239, 1239, 1239,  557,  557,  557, 1258, 1258, 1258, 1248,
     1248, 1248, 1253, 1253, 1253,  531, 1522, 1523,  711, 1520,
     1538,  559, 1524,  531,  531, 1525, 1256,  531,  983,  531,
      531,  557,  557,  557, 1272, 1272, 1272, 1258, 1258, 1258,
     1281, 1281, 1281,  531, 1263, 1532,  804, 1268, 1533,  559,
     1526,  982,  531,  531,  531,  531, 1527,  531,  531,  531,

     1271,  557,  557,  557, 1272, 1272, 1272,  531, 1286,  981,
     1528, 1287, 1273, 1289, 1289, 1289, 1290, 1290, 1290,  559,
     1529, 1530,  531,  531, 1531, 1285, 1281, 1281, 1281,  531,
      980,  531,  531,  531,  531, 1299, 1299, 1299, 1289, 1289,
     1289, 1290, 1290, 1290,  531, 1305, 1540, 1539, 1306, 1308,
     1308, 1308, 1535, 1300,  531,  531,  531, 1541, 1536,  531,
     1553, 1296, 1313, 1313, 1313, 1534,  531,  531, 1299, 1299,
     1299, 1542, 1542, 1304, 1321, 1321, 1321, 1308, 1308, 1308,
      531, 1322, 1543,  531, 1323,  531, 1300, 1326, 1326, 1326,
     1543, 1568,  531,  531, 1544,  531, 1313, 1313, 1313, 1321,

     1321, 1321,  531, 1337,  531,  531, 1338, 1550, 1327, 1342,
     1342, 1342,  531,  531,  531,  979,  531,  531, 1326, 1326,
     1326, 1358, 1358, 1358, 1342, 1342, 1342,  531, 1364, 1364,
     1364, 1329, 1367, 1367, 1367,  531,  531, 1588,  975,  531,
      531, 1568,  531, 1400, 1400, 1400,  531, 1358, 1358, 1358,
      531, 1375, 1545, 1343, 1376,  531, 1364, 1364, 1364, 1359,
     1382,  531, 1551, 1383, 1548,  531, 1367, 1367, 1367, 1549,
     1386,  531, 1563, 1387,  531, 1408, 1408, 1408, 1400, 1400,
     1400,  531, 1420,  531,  531, 1421,  972, 1408, 1408, 1408,
      531, 1428, 1571,  531, 1429, 1552,  531, 1440, 1440, 1440,

     1443, 1443, 1443,  531,  531,  531, 1446, 1446, 1446, 1460,
     1460, 1460, 1440, 1440, 1440,  531, 1564, 1554,  531, 1443,
     1443, 1443,  531, 1464, 1447,  531, 1465,  531,  531,  531,
      531, 1446, 1446, 1446, 1472, 1472, 1472,  531, 1479, 1479,
     1479, 1460, 1460, 1460, 1569, 1480, 1589, 1461, 1481, 1447,
      971,  966, 1473, 1472, 1472, 1472,  531, 1601, 1602,  531,
     1494, 1494, 1494, 1479, 1479, 1479,  965, 1498,  531,  531,
     1499, 1473, 1513, 1513, 1513, 1494, 1494, 1494, 1495,  962,
      531,  531, 1513, 1513, 1513, 1546, 1546, 1546,  531,  531,
     1514,  531,  531, 1495,  531, 1555, 1556, 1557, 1557, 1557,

     1514,  964,  531, 1547, 1559, 1559, 1559, 1561, 1546, 1546,
     1546, 1567, 1567, 1567,  531, 1558, 1562,  531, 1565, 1566,
     1571, 1572, 1560, 1557, 1557, 1557, 1547,  531, 1570,  531,
     1559, 1559, 1559,  531,  531, 1578, 1578, 1578,  531,  531,
     1590, 1558, 1574,  531, 1573, 1567, 1567, 1567, 1560, 1576,
      531,  531, 1577, 1579, 1575, 1582, 1582, 1582, 1590,  531,
     1580,  531,  531,  531, 1593, 1581,  531, 1584,  963,  956,
     1586, 1598,  531, 1583, 1578, 1578, 1578, 1587,  531, 1585,
     1582, 1582, 1582, 1593,  531,  531, 1591, 1605, 1592, 1596,
     1596, 1596, 1579, 1598,  531, 1594,  531, 1606, 1583, 1595,

     1599, 1599, 1599,  531,  531,  531,  531, 1597, 1596, 1596,
     1596, 1603, 1603, 1603, 1599, 1599, 1599,  531, 1600, 1603,
     1603, 1603,  531,  531, 1609, 1613, 1597, 1613,  955, 1604,
     1607,  953, 1600, 1614, 1614, 1614,  952, 1604,  531,  531,
     1614, 1614, 1614,  951, 1608, 1610,  950,  948,  947, 1611,
     1612, 1615,  946,  945,  944,  943,  941,  940, 1615,  176,
      176,  176,  176,  176,  176,  176,  177,  177,  177,  177,
      177,  177,  177,  182,  182,  182,  182,  182,  182,  182,
      185,  185,  185,  185,  185,  185,  185,  188,  188,  188,
      188,  188,  188,  188,  191,  191,  191,  191,  191,  191,

      191,  198,  198,  198,  198,  198,  198,  198,  206,  206,
      206,  206,  206,  206,  206,  210,  210,  210,  210,  210,
      210,  210,  226,  226,  226,  226,  226,  226,  226,  230,
      230,  230,  230,  230,  230,  230,  237,  237,  237,  237,
      237,  237,  237,  241,  241,  241,  241,  241,  241,  241,
      248,  248,  248,  248,  248,  248,  248,  255,  255,  255,
      255,  255,  255,  255,  264,  264,  264,  264,  264,  264,
      264,  268,  268,  268,  268,  268,  268,  268,  275,  275,
      275,  275,  275,  275,  275,  279,  279,  279,  279,  279,
      279,  279,  288,  288,  288,  288,  288,  288,  288,  295,

      295,  295,  295,  295,  295,  295,  305,  305,  305,  305,
      305,  305,  305,  313,  313,  313,  313,  313,  313,  313,
      322,  322,  322,  322,  322,  322,  322,  333,  333,  333,
      333,  333,  333,  333,  340,  340,  340,  340,  340,  340,
      340,  349,  349,  349,  349,  349,  349,  349,  374,  374,
      374,  939,  374,  386,  386,  386,  938,  386,  390,  390,
      390,  937,  390,  394,  394,  394,  936,  394,  403,  403,
      403,  933,  403,  407,  407,  407,  932,  407,  412,  412,
      412,  929,  412,  421,  421,  421,  926,  421,  426,  426,
      426,  925,  426,  431,  431,  431,  923,  431,  437,  437,

      437,  920,  437,  440,  440,  440,  919,  440,  445,  445,
      445,  918,  445,  451,  451,  451,  451,  451,  917,  451,
      466,  916,  466,  477,  915,  477,  480,  914,  480,  486,
      906,  486,  491,  905,  491,  494,  903,  494,  501,  902,
      501,  506,  901,  506,  511,  900,  511,  516,  898,  516,
      518,  897,  518,  522,  896,  522,  528,  895,  528,  530,
      530,  530,  530,  530,  530,  530,  536,  894,  893,  536,
      545,  545,  545,  545,  545,  545,  558,  558,  558,  558,
      558,  558,  563,  563,  563,  563,  563,  563,  571,  571,
      571,  571,  571,  571,  578,  578,  578,  578,  578,  578,

      583,  583,  583,  583,  583,  583,  592,  592,  592,  592,
      592,  592,  599,  599,  599,  599,  599,  599,  605,  605,
      605,  605,  605,  605,  612,  612,  612,  612,  612,  612,
      616,  616,  616,  616,  616,  616,  622,  622,  622,  622,
      622,  622,  630,  630,  630,  630,  630,  630,  709,  709,
      709,  709,  709,  709,  709, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1238, 1238, 1238, 1238, 1238, 1238, 1238,  891,  890,  889,

      888,  887,  886,  884,  882,  879,  878,  875,  874,  872,
      869,  868,  867,  866,  865,  864,  863,  856,  855,  832,
      831,  830,  828,  827,  823,  822,  820,  814,  813,  812,
      811,  810,  809,  808,  807,  806,  711,  763,  762,  761,
      756,  752,  749,  744,  743,  741,  724,  723,  722,  721,
      720,  719,  718,  715,  714,  713,  679,  678,  677,  673,
      670,  669,  667,  663,  662,  660,  655,  647,  645,  648,
      646,  644,  640,  638,  637,  636,  635,  634,  531,  628,
      627,  626,  625,  620,  619,  610,  609,  608,  603,  602,
      597,  596,  595,  590,  589,  588,  587,  586,  581,  576,

      575,  574,  569,  568,  567,  566,  561,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  543,  542,  541,  540,
      539,  538,  537,  534,  532,  531,  529,  527,  526,  525,
      524,  523,  521,  520,  519,  517,  515,  514,  513,  512,
      510,  509,  508,  507,  504,  503,  502,  500,  499,  498,
      497,  496,  495,  493,  492,  490,  489,  488,  487,  485,
      484,  483,  482,  481,  479,  478,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  465,  464,  463,  462,
      461,  460,  455,  452,  454,  449,  448,  447,  446,  444,
      442,  441,  439,  436,  434,  433,  432,  430,  428,  427,

      425,  424,  420,  416,  415,  414,  413,  411,  406,  404,
      402,  397,  396,  395,  393,  391,  389,  387,  385,  375,
      373,  371,  365,  364,  365,  364,  363,  362, 1616,  175,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616

    } ;

static yyconst short int yy_chk[4896] =
    {   0,
        0,    3,    3,    3,    4,    4,    4,    5,    5,    5,
        6,    6,    6,    7,    7,    7,   11,    3,    9,   12,
        4,   10, 1004,    5, 1004,    9,    6,  358,   10,    7,
        8,    8,    8,  180,   11,   13,   13,   12,   14,   14,
       13,   13,  358,   14,   14,  181,    8,   17,   17,  180,
       13,   15,   15,   14,   15,  184,   15,   16,   16,  804,
       16,  181,   16,   18,   18, 1058,   15,   19,   19,   19,
      422,  184,   16,   20,   20,   20,   23,   23,   23,   24,
       24,   24, 1058,   19,   25,   25,   25,   17,  367,   20,
      533,  367,   23,  804,  533,   24,  178,  178,  178, 1255,

       25,  633,  422,   18,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,  633,
       21,   21,   21,   21,   21,   26,   26,   26,   27,   27,
       27,   28,   28,   28,   29,   29,   29,   30,   30,   30,
      548,   26, 1128,  860,   27,   21,   21,   28,  207,  453,
       29, 1128,  548,   30,  179,  179,  179,  183,  183,  183,
      204,  204,  204,  453,  207,   21,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,  860,   22,   22,   22,   22,   22,   31,   31,   31,
       32,   32,   32,   33,   33,   33,   34,   34,   34,   35,

       35,   35,  550,   31, 1254,  805,   32,   22,   22,   33,
      708,  859,   34,  552,  550,   35,   36,   36,   36,   37,
       37,   37,   38,   38,   38,  552,  202,   22,   39,   39,
       39,  708,   36,  805,  787,   37,  787,  859,   38,   40,
       40,   40,  202,  202,   39,   41,   41,   41,   42,   42,
       42,   43,   43,   43, 1157,   40,   44,   44,   44,  858,
      788,   41,  788,  960,   42,  858,  214,   43,   45,   45,
       45, 1157,   44,   46,   46,   46,   47,   47,   47,   48,
       48,   48,  214,  222,   45,   49,   49,   49, 1008,   46,
      222, 1008,   47,  214,  960,   48,   50,   50,   50,  222,

      227,   49,   51,   51,   51,   52,   52,   52,   53,   53,
       53, 1006,   50,   54,   54,   54,  227, 1006,   51, 1216,
     1216,   52, 1052,  238,   53,   55,   55,   55, 1061,   54,
       56,   56,   56,  211,  211,  211,  224,  224,  224,  238,
     1052,   55,  231,  231,  231, 1240,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57, 1061,   57,   57,   57,   57,   57,   59,   59,
       59,   60,   60,   60,   61,   61,   61,   62,   62,   62,
       63,   63,   63, 1057,   59, 1011, 1102,   60,   57,   57,
       61, 1009, 1102,   62, 1057, 1009,   63,  235,  235,  235,

       57,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58, 1011,   58,   58,   58,
       58,   58,   64,   64,   64,   65,   65,   65,   66,   66,
       66,   67,   67,   67,   68,   68,   68, 1105,   64, 1051,
     1107,   65,   58,   58,   66, 1133, 1051,   67, 1105, 1133,
       68,  242,  242,  242,   58,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
     1107,   69,   69,   69,   69,   69,   71,   71,   71,   72,
       72,   72,   73,   73,   73,   74,   74,   74,   75,   75,
       75, 1059,   71, 1059, 1129,   72,   69,   69,   73, 1129,

     1100,   74, 1100, 1238,   75,  246,  246,  246,   69,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,  909,   70,   70,   70,   70,   70,
       76,   76,   76,   77,   77,   77,   78,   78,   78,   79,
       79,   79,   80,   80,   80,  249,   76, 1104, 1237,   77,
       70,   70,   78, 1104, 1136,   79, 1136, 1153,   80,  909,
      910,  249,   70,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81, 1153,   81,
       81,   81,   81,   81,   83,   83,   83,   84,   84,   84,
       85,   85,   85,   86,   86,   86,   87,   87,   87,  910,

       83,  233, 1267,   84,   81,   81,   85, 1267,  233,   86,
      959,   81,   87,  256,  256,  256,   81,  233,  262,  262,
      262,   81,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,  959,   82,   82,
       82,   82,   82,   88,   88,   88,   89,   89,   89,   90,
       90,   90,   91,   91,   91,   92,   92,   92, 1012,   88,
     1062, 1210,   89,   82,   82,   90, 1301, 1210,   91, 1054,
       82,   92,   93,   93,   93,   82,   94,   94,   94,  265,
       82,   95,   95,   95,   96,   96,   96, 1054,   93,  269,
      269,  269,   94, 1012, 1062,  265, 1056,   95, 1236, 1301,

       96,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97, 1056,   97,   97,   97,
       97,   97,   99,   99,   99,  100,  100,  100,  101,  101,
      101,  102,  102,  102,  103,  103,  103,  254,   99, 1181,
     1132,  100,   97,   97,  101, 1154, 1212,  102, 1154, 1212,
      103, 1132, 1181,  254,   97,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      254,   98,   98,   98,   98,   98,  104,  104,  104,  105,
      105,  105,  106,  106,  106,  109,  109,  109,  110,  110,
      110, 1137,  104, 1188, 1155,  105,   98,   98,  106, 1221,

     1188,  109, 1137, 1155,  110,  273,  273,  273,   98,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  276,  107,  107,  107,  107,  107,
      111,  111,  111,  112,  112,  112,  280,  280,  280, 1279,
      276,  286,  286,  286, 1279, 1160,  111, 1160, 1101,  112,
      107,  107,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108, 1101,  108,  108,
      108,  108,  108,  113,  113,  113,  114,  114,  114,  115,
      115,  115,  116,  116,  116,  117,  117,  117, 1185,  113,
     1211, 1219,  114,  108,  108,  115, 1211, 1161,  116, 1185,

     1159,  117,  118,  118,  118,  119,  119,  119,  120,  120,
      120,  121,  121,  121,  122,  122,  122, 1161,  118, 1159,
     1179,  119,  216,  283,  120,  289,  306,  121, 1242, 1180,
      122,  123,  123,  123,  124,  124,  124, 1179,  216,  283,
     1242,  289,  306,  283,  296,  296,  296,  123, 1180,  216,
      124,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125, 1182,  125,  125,  125,
      125,  125,  127,  127,  127,  128,  128,  128,  129,  129,
      129,  130,  130,  130,  131,  131,  131, 1182,  127,  244,
      299,  128,  125,  125,  129, 1217,  244,  130, 1348,  125,

      131,  303,  303,  303,  125,  244,  299,  299,  125,  125,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126, 1348,  126,  126,  126,  126,
      126,  132,  132,  132,  133,  133,  133,  134,  134,  134,
      135,  135,  135,  136,  136,  136, 1187,  132, 1187, 1225,
      133,  126,  126,  134,  301, 1225,  135, 1002,  126,  136,
      137,  137,  137,  126,  138,  138,  138,  126,  126, 1002,
      301,  194,  311,  311,  311, 1002,  137,  301, 1196, 1171,
      138,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  314,  139,  139,  139,

      139,  139,  143,  143,  143,  141,  141,  769,  194,  769,
      141, 1189,  314, 1206,  194, 1206,  194,  769,  143, 1189,
      141,  194,  139,  139,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140, 1003,
      140,  140,  140,  140,  140,  141,  142,  142,  144,  144,
      144,  142, 1315, 1003,  149,  149,  149,  803,  150,  150,
      150,  142,  147,  147,  144,  140,  140,  147,  148,  148,
      149, 1007,  803,  148,  150, 1213, 1226,  147,  320,  320,
      320, 1315, 1226,  148, 1213, 1007,  142,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  147,  145,  145,  145,  145,  145,  148,  155,
      155,  155,  331,  331,  331, 1316,  156,  156,  156, 1060,
      323, 1204,  153,  153, 1010,  155,  260,  153,  145,  145,
      154,  154,  156,  260, 1060,  154,  323,  153, 1010, 1204,
      145, 1145,  260, 1141, 1316,  154,  145,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  153,  146,  146,  146,  146,  146,  271,  218,
      154,  338,  338,  338, 1286,  271,  161,  161,  161,  347,
      347,  347,  159,  159,  271,  218,  284,  159,  146,  146,
      160,  160,  161,  284, 1186,  160,  218,  159, 1286, 1232,

      146, 1118,  284, 1232, 1186,  160,  146,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  159,  151,  151,  151,  151,  151,  220,  221,
      160,  162,  162,  162,  167,  167,  167,  168,  168,  168,
      329,  334,  341, 1192,  220,  221,  350,  162,  151,  151,
      167, 1264, 1218,  168, 1192,  220,  329,  334,  341,  329,
      151,  221,  350, 1218, 1264,  151,  151,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  259,  152,  152,  152,  152,  152,  232,  212,
      219,  357,  357,  357,  257,  232,  212,  219,  259, 1113,

     1053,  257,  165,  165,  232,  212,  219,  165,  152,  152,
      257,  259, 1234,  257, 1053,  232,  212,  165, 1234, 1282,
      152,  212,  219,  257, 1282,  152,  152,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  165,  157,  157,  157,  157,  157,  270, 1233,
     1112,  166,  166, 1110, 1109,  270,  166,  366,  366,  366,
     1233,  456,  456,  456,  270,  456,  166,  270,  157,  157,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  281,  158,  158,  158,  158,
      158,  166,  281, 1131,  171,  171,  542,  542,  542,  171,

     1244,  281,  639,  639,  639,  281, 1244,  366, 1131,  171,
     1205,  158,  158,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163, 1205,  163,
      163,  163,  163,  163,  171,  213, 1005,  650,  650,  650,
      258,  650,  213,  243,  650,  278, 1227,  258,  172,  172,
      243,  213, 1005,  172,  163,  163,  258, 1087,  770,  243,
      770,  278,  213,  172, 1227, 1084,  163,  213,  770,  258,
      243,  278,  163,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  172,  164,
      164,  164,  164,  164, 1098,  215,  217,  669,  669,  669,

      300,  297,  215,  217,  556,  556,  556,  300,  297, 1099,
     1098,  215,  217,  298,  164,  164,  300,  297,  297, 1260,
      298,  556,  215,  217,  297, 1099,  164,  215,  217,  298,
      298, 1260,  164,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  308,  169,
      169,  169,  169,  169,  318,  308,  282,  749,  749,  749,
     1209,  318,  328,  282,  308,  466,  466,  466, 1134,  328,
      318, 1055,  282,  336,  169,  169,  282,  169,  328,  169,
      336, 1209,  282,  466, 1134, 1055,  169, 1079, 1076,  336,
     1073, 1067,  169,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  345,  170,
      170,  170,  170,  170,  356,  345, 1245, 1251,  467,  467,
      467,  356, 1245, 1251,  345,  477,  477,  477, 1249, 1135,
      356,  478,  478,  478,  170,  170,  467,  170, 1103,  170,
      480,  480,  480,  477, 1103, 1135,  170, 1249,  467,  478,
     1066, 1162,  170,  481,  481,  481, 1103, 1228,  480,  486,
      486,  486, 1106,  478,  487,  487,  487, 1162,  491,  491,
      491,  481,  492,  492,  492, 1228, 1106,  486, 1207,  494,
      494,  494,  487, 1252, 1065,  481,  491,  495,  495,  495,
      492,  501,  501,  501, 1252, 1207,  487,  494,  502,  502,

      502,  561,  561,  561,  492,  495,  506,  506,  506,  501,
      507,  507,  507,  511,  511,  511,  502, 1262,  561,  495,
     1214, 1229,  502, 1262,  506,  512,  512,  512,  507, 1064,
     1247,  511,  516,  516,  516,  517,  517,  517,  518,  518,
      518, 1214, 1229,  512,  507,  519,  519,  519, 1247, 1294,
      516, 1063,  779,  517,  779,  517,  518,  522,  522,  522,
     1294,  512,  779,  519,  523,  523,  523, 1163,  528,  528,
      528,  529,  529,  529,  780,  522,  780,  519,  544,  544,
      544, 1163,  523, 1049,  780,  523,  528, 1048, 1276,  529,
      545,  545,  545,  529, 1276, 1263,  544,  547,  547,  547,

      557,  557,  557,  558,  558,  558, 1191, 1268,  545,  560,
      560,  560,  562,  562,  562,  547, 1263, 1046,  557, 1250,
     1191,  558,  547,  563,  563,  563, 1215,  560, 1268, 1273,
      562,  565,  565,  565,  567,  567,  567, 1250,  560, 1331,
     1215,  563,  568,  568,  568,  570,  570,  570, 1331,  565,
     1273,  567,  571,  571,  571,  573,  573,  573, 1265,  568,
      565, 1045, 1261,  570,  576,  576,  576,  577,  577,  577,
      571, 1277, 1265,  573,  578,  578,  578,  580,  580,  580,
     1261,  576, 1291, 1277,  573,  577,  582,  582,  582,  583,
      583,  583,  578, 1332, 1291,  580,  585,  585,  585,  588,

      588,  588, 1332, 1295,  582, 1293,  580,  583,  590,  590,
      590,  751,  751,  751,  585, 1296,  588,  591,  591,  591,
      592,  592,  592, 1293, 1295,  590,  594,  594,  594,  585,
      598,  598,  598, 1352, 1302,  591, 1296, 1287,  592,  599,
      599,  599, 1352, 1324,  594,  601,  601,  601,  598,  602,
      602,  602,  603,  603,  603, 1324, 1309,  599,  604,  604,
      604, 1287, 1309,  601,  594, 1044,  602, 1302, 1304,  603,
      605,  605,  605,  607,  607,  607,  604,  601,  608,  608,
      608,  609,  609,  609,  610,  610,  610, 1330,  605, 1304,
     1310,  607,  611,  611,  611,  608, 1310, 1305,  609, 1330,

     1319,  610,  612,  612,  612,  614,  614,  614, 1280,  607,
      611,  615,  615,  615,  616,  616,  616,  618,  618,  618,
      612, 1305, 1230,  614, 1280,  619,  619,  619, 1314,  615,
     1043, 1041,  616, 1319, 1314,  618,  620,  620,  620, 1230,
     1320,  614,  619,  621,  621,  621,  622,  622,  622,  618,
      624,  624,  624,  620,  625,  625,  625,  626,  626,  626,
     1306,  621, 1329, 1298,  622,  627,  627,  627,  624, 1040,
     1339,  625, 1039, 1320,  626,  628,  628,  628,  629,  629,
      629, 1298,  627, 1329, 1306,  624,  630,  630,  630,  632,
      632,  632,  628,  634,  634,  634,  629,  641,  641,  641,

      649,  649,  649, 1339,  630, 1322, 1340,  632, 1317,  632,
     1246,  634,  634, 1259, 1317,  641, 1038,  649,  651,  651,
      651,  652,  652,  652,  653,  653,  653, 1246,  653, 1322,
     1259,  653,  654,  654,  654, 1323,  651, 1333,  652, 1340,
      655,  655,  655,  656,  656,  656,  658,  658,  658, 1333,
      654,  657,  657,  657,  651,  657,  654,  655,  657, 1323,
      656, 1037, 1327,  658,  659,  659,  659, 1278,  659, 1036,
     1344,  659,  661,  661,  661,  664,  664,  664,  665,  665,
      665, 1327,  665, 1344, 1278,  665,  666,  666,  666, 1303,
      661, 1328,  664,  668,  668,  668,  671,  671,  671,  672,

      672,  672, 1334,  672,  666, 1283,  672, 1303,  661, 1328,
      666,  668, 1288,  671,  674,  674,  674,  675,  675,  675,
     1334,  675, 1283, 1335,  675,  668,  676,  676,  676, 1288,
     1349,  674, 1034,  680,  680,  680,  681,  681,  681,  682,
      682,  682, 1312,  682,  676, 1318,  682,  683,  683,  683,
      676,  680, 1335,  681,  684,  684,  684, 1349,  684, 1312,
     1353,  684, 1318, 1336,  683,  685,  685,  685, 1379, 1353,
      680,  686,  686,  686,  687,  687,  687, 1343,  687, 1379,
     1346,  687, 1033,  685,  688,  688,  688, 1337,  686,  689,
      689,  689, 1336,  689, 1345, 1354,  689, 1346, 1343,  685,

     1345,  688,  690,  690,  690,  691,  691,  691, 1338,  691,
     1032, 1337,  691,  692,  692,  692,  693,  693,  693,  690,
      694,  694,  694,  695,  695,  695, 1359,  695, 1354, 1351,
      695,  692, 1338,  692,  693, 1351, 1356,  694,  696,  696,
      696,  697,  697,  697, 1361,  697, 1355, 1359,  697, 1361,
      693,  698,  698,  698, 1031,  696,  699,  699,  699,  700,
      700,  700, 1357,  700, 1360, 1356,  700, 1365, 1366,  698,
      701,  701,  701,  699, 1030,  698,  702,  702,  702, 1355,
      702, 1360, 1362,  702,  703,  703,  703,  701,  704,  704,
      704, 1357,  704, 1029, 1362,  704,  705,  705,  705, 1369,

     1027,  703,  706,  706,  706, 1363,  706, 1365, 1366,  706,
      707,  707,  707,  705,  710,  710,  710,  716,  716,  716,
      725,  725,  725, 1363,  725, 1021, 1369,  725,  707,  728,
      728,  728,  710, 1375, 1370,  716,  729,  729,  729,  707,
      729, 1378, 1368,  729,  732,  732,  732,  728,  733,  733,
      733,  734,  734,  734, 1368,  734, 1405, 1375,  734, 1378,
      710, 1370,  732,  728, 1371,  733,  732, 1405,  735,  735,
      735, 1389,  735, 1373,  710,  735,  738,  738,  738, 1372,
      738, 1374, 1373,  738,  742,  742,  742,  745,  745,  745,
     1374,  745, 1377, 1371,  745,  748,  748,  748,  750,  750,

      750, 1376,  742,  753,  753,  753, 1381,  753, 1372, 1377,
      753, 1389, 1381,  748, 1017, 1382,  750,  748,  742,  757,
      757,  757, 1390,  757, 1383, 1376,  757,  750,  760,  760,
      760,  764,  764,  764,  765,  765,  765, 1016,  765, 1382,
     1015,  765, 1397,  768,  768,  768,  760,  768, 1383,  764,
      768,  771,  771,  771,  772,  772,  772,  760,  772, 1014,
     1397,  772, 1390, 1391,  764, 1384,  775,  775,  775,  771,
      775, 1386, 1391,  775, 1398,  778,  778,  778,  771,  778,
     1398, 1013,  778,  781,  781,  781,  782,  782,  782,  783,
      783,  783, 1384,  783, 1385, 1386,  783, 1399,  786,  786,

      786,  781,  786, 1399,  782,  786,  789,  789,  789,  782,
      790,  790,  790, 1387,  790, 1000,  999,  790,  793,  793,
      793, 1385,  793, 1392,  789,  793,  796,  796,  796, 1393,
      796, 1404, 1392,  796,  799,  799,  799, 1387,  799, 1394,
      789,  799,  802,  802,  802, 1404,  807,  807,  807,  815,
      815,  815,  816,  816,  816, 1395, 1393,  817,  817,  817,
      802,  817,  802,  807,  817, 1396, 1394,  815, 1402,  815,
      816,  997,  821,  821,  821,  824,  824,  824,  825,  825,
      825,  826,  826,  826,  829,  829,  829, 1403, 1395,  816,
      821, 1413,  821,  824,  831,  831,  831,  996, 1396,  826,

     1406, 1402,  829,  833,  833,  833,  840,  840,  840,  861,
      861,  861,  824,  826,  847,  847,  847,  849,  849,  849,
     1403,  833, 1401, 1407,  840, 1409,  861,  840,  854,  854,
      854, 1413,  847, 1406, 1401,  849, 1415, 1410,  833,  857,
      857,  857, 1431, 1414,  849, 1416,  854,  862,  862,  862,
     1411,  862, 1409, 1431,  862,  995, 1407,  857,  870,  870,
      870,  871,  871,  871, 1410, 1415,  854,  873,  873,  873,
      876,  876,  876,  857, 1416, 1418,  870, 1411, 1417,  871,
      877,  877,  877, 1414, 1417,  873,  870, 1418,  876, 1432,
      871,  879,  879,  879,  994,  873, 1423,  992,  877,  876,

      880,  880,  880,  883,  883,  883,  877, 1420,  879,  885,
      885,  885,  892,  892,  892,  899,  899,  899,  880,  904,
      904,  904,  907,  907,  907, 1423, 1421,  885,  991, 1432,
      892, 1420, 1433,  899,  908,  908,  908,  904,  990,  904,
      907,  911,  911,  911, 1424,  911,  899,  907,  911,  892,
     1421, 1412,  908,  914,  914,  914,  917,  917,  917,  921,
      921,  921,  922,  922,  922,  923,  923,  923, 1428,  924,
      924,  924, 1433, 1424,  914, 1426, 1502,  921, 1412,  989,
      922,  988, 1436,  921,  987, 1427,  922,  924,  927,  927,
      927, 1436, 1428,  924, 1502,  928,  928,  928,  930,  930,

      930,  931,  931,  931, 1426,  931,  927, 1462,  931,  934,
      934,  934,  927,  928, 1427,  930, 1434,  942,  942,  942,
      949,  949,  949,  954,  954,  954,  985,  934,  957,  957,
      957,  961,  961,  961,  928,  942, 1462, 1441,  949,  984,
      949,  954, 1429, 1434,  954, 1435,  957,  967,  967,  967,
      968,  968,  968,  942, 1463,  957,  958,  958,  958,  969,
      969,  969,  970,  970,  970,  967, 1429, 1430,  968,  967,
     1441,  968, 1435, 1470,  958, 1438,  958, 1442,  958,  958,
      970, 1430,  958, 1463,  970,  958,  958, 1438,  958,  983,
      982,  958,  958,  973,  973,  973,  974,  974,  974,  976,

      976,  976, 1470,  976, 1437,  981,  976,  979,  979,  979,
     1442,  973, 1444, 1437,  974,  986,  986,  986,  993,  993,
      993, 1444,  998,  998,  998, 1001, 1001, 1001, 1018, 1018,
     1018, 1521, 1445,  986, 1455, 1448,  993, 1521, 1449,  986,
      998, 1445, 1450, 1001, 1448, 1453, 1018, 1449, 1455, 1001,
     1461,  998, 1451, 1477,  993, 1019, 1019, 1019, 1020, 1020,
     1020, 1022, 1022, 1022, 1018, 1023, 1023, 1023, 1025, 1025,
     1025, 1461, 1453, 1019,  980, 1450, 1020, 1028, 1028, 1028,
     1035, 1035, 1035, 1023,  975, 1451, 1025, 1042, 1042, 1042,
      972, 1454, 1019, 1477, 1020, 1047, 1047, 1047, 1035, 1050,

     1050, 1050, 1068, 1068, 1068, 1042, 1069, 1069, 1069, 1457,
      971, 1042,  966, 1047, 1070, 1070, 1070, 1050, 1454, 1047,
     1068, 1071, 1071, 1071, 1069, 1072, 1072, 1072, 1050, 1080,
     1080, 1080, 1070, 1456, 1068,  965, 1457, 1069, 1088, 1088,
     1088, 1093, 1093, 1093, 1456, 1458, 1070, 1080, 1096, 1096,
     1096, 1097, 1097, 1097, 1474,  964, 1088,  963, 1478, 1093,
     1108, 1108, 1108, 1111, 1111, 1111, 1096, 1464, 1474, 1097,
     1471, 1096, 1458, 1088, 1114, 1114, 1114, 1108, 1108, 1115,
     1115, 1115, 1116, 1116, 1116, 1117, 1117, 1117, 1123, 1123,
     1123, 1464, 1114, 1124, 1124, 1124, 1465, 1115, 1478, 1471,

     1116, 1487, 1115, 1127, 1127, 1127, 1123, 1480, 1114, 1466,
     1467, 1124, 1126, 1126, 1126, 1468, 1116, 1130, 1130, 1130,
     1465, 1127, 1138, 1138, 1138, 1126, 1139, 1139, 1139,  962,
     1126, 1480, 1142, 1142, 1142, 1130, 1466, 1467, 1127, 1138,
     1138, 1487, 1468, 1139, 1139, 1140, 1140, 1140,  956, 1140,
     1469, 1485, 1140, 1142, 1143, 1143, 1143, 1144, 1144, 1144,
     1146, 1146, 1146, 1140, 1147, 1147, 1147, 1148, 1148, 1148,
     1149, 1149, 1149, 1150, 1150, 1150,  955, 1469, 1146, 1152,
     1152, 1152, 1147, 1483, 1485, 1148, 1481, 1149, 1169, 1169,
     1169, 1150, 1483, 1147, 1156, 1156, 1156, 1152,  953, 1146,

     1158, 1158, 1158, 1164, 1164, 1164, 1148, 1165, 1165, 1165,
     1481, 1165, 1156, 1475, 1165, 1166, 1166, 1166, 1158, 1166,
     1164, 1164, 1166,  952, 1475, 1165, 1170, 1170, 1170, 1156,
     1195, 1195, 1195, 1166, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167,  951, 1482, 1167, 1172, 1172, 1172,  950,
     1167, 1167, 1167, 1167, 1167, 1174, 1174, 1174, 1176, 1176,
     1176, 1482, 1176, 1484, 1172, 1176,  948, 1172, 1173, 1173,
     1173,  947, 1484, 1174,  946, 1167, 1167, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1173, 1488, 1168, 1175,
     1175, 1175, 1173, 1168, 1168, 1168, 1168, 1168, 1177, 1177,

     1177, 1489, 1183, 1183, 1183, 1486, 1175, 1184, 1184, 1184,
     1190, 1190, 1190, 1490, 1190, 1491, 1177, 1190, 1168, 1168,
     1183, 1197, 1197, 1197, 1491, 1184,  945, 1488, 1190, 1270,
     1270, 1270,  944,  943, 1198, 1198, 1198, 1500, 1486, 1197,
     1496, 1489, 1184, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1198, 1490, 1193, 1199, 1199, 1199, 1197, 1193,
     1193, 1193, 1193, 1193, 1201, 1201, 1201, 1496, 1201, 1497,
     1500, 1201, 1516, 1199, 1284, 1284, 1284, 1208, 1208, 1208,
     1220, 1220, 1220, 1516, 1193, 1193, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1208, 1497, 1194, 1220, 1220,

     1498, 1492, 1194, 1194, 1194, 1194, 1194, 1222, 1222, 1222,
     1492, 1499, 1208, 1223, 1223, 1223, 1231, 1231, 1231,  941,
     1522, 1235, 1235, 1235, 1498, 1222, 1501, 1194, 1194, 1503,
     1504, 1223,  940, 1505, 1231, 1499, 1506, 1231, 1222, 1235,
     1239, 1239, 1239, 1241, 1241, 1241, 1243, 1243, 1243, 1248,
     1248, 1248, 1253, 1253, 1253, 1517, 1503, 1504, 1239, 1501,
     1522, 1241, 1505, 1507, 1243, 1506, 1241, 1248,  939, 1508,
     1253, 1256, 1256, 1256, 1257, 1257, 1257, 1258, 1258, 1258,
     1266, 1266, 1266, 1509, 1248, 1515, 1239, 1253, 1517, 1256,
     1507,  938, 1257, 1510, 1511, 1258, 1508, 1512, 1266, 1515,

     1256, 1271, 1271, 1271, 1272, 1272, 1272, 1523, 1272,  937,
     1509, 1272, 1258, 1274, 1274, 1274, 1275, 1275, 1275, 1271,
     1510, 1511, 1272, 1519, 1512, 1271, 1281, 1281, 1281, 1520,
      936, 1274, 1518, 1538, 1275, 1285, 1285, 1285, 1289, 1289,
     1289, 1290, 1290, 1290, 1281, 1290, 1524, 1523, 1290, 1292,
     1292, 1292, 1519, 1285, 1530, 1524, 1289, 1525, 1520, 1290,
     1538, 1281, 1297, 1297, 1297, 1518, 1525, 1292, 1299, 1299,
     1299, 1526, 1527, 1289, 1307, 1307, 1307, 1308, 1308, 1308,
     1297, 1308, 1529, 1527, 1308, 1526, 1299, 1311, 1311, 1311,
     1528, 1554, 1307, 1529, 1530, 1308, 1313, 1313, 1313, 1321,

     1321, 1321, 1554, 1321, 1528, 1311, 1321, 1535, 1311, 1325,
     1325, 1325, 1531, 1576, 1313,  932, 1535, 1321, 1326, 1326,
     1326, 1341, 1341, 1341, 1342, 1342, 1342, 1325, 1347, 1347,
     1347, 1313, 1350, 1350, 1350, 1533, 1326, 1576,  929, 1341,
     1534, 1553, 1342, 1380, 1380, 1380, 1347, 1358, 1358, 1358,
     1350, 1358, 1531, 1326, 1358, 1553, 1364, 1364, 1364, 1342,
     1364, 1380, 1536, 1364, 1533, 1358, 1367, 1367, 1367, 1534,
     1367, 1536, 1548, 1367, 1364, 1388, 1388, 1388, 1400, 1400,
     1400, 1548, 1400, 1537, 1367, 1400,  926, 1408, 1408, 1408,
     1539, 1408, 1562, 1388, 1408, 1537, 1400, 1419, 1419, 1419,

     1422, 1422, 1422, 1562, 1555, 1408, 1425, 1425, 1425, 1439,
     1439, 1439, 1440, 1440, 1440, 1419, 1549, 1539, 1422, 1443,
     1443, 1443, 1577, 1443, 1425, 1549, 1443, 1439, 1594, 1595,
     1440, 1446, 1446, 1446, 1452, 1452, 1452, 1443, 1459, 1459,
     1459, 1460, 1460, 1460, 1555, 1460, 1577, 1440, 1460, 1446,
      925,  920, 1452, 1472, 1472, 1472, 1459, 1594, 1595, 1460,
     1476, 1476, 1476, 1479, 1479, 1479,  919, 1479, 1540, 1541,
     1479, 1472, 1493, 1493, 1493, 1494, 1494, 1494, 1476,  918,
     1544, 1479, 1513, 1513, 1513, 1532, 1532, 1532, 1556, 1545,
     1493, 1550, 1551, 1494, 1563, 1540, 1541, 1542, 1542, 1542,

     1513,  916, 1565, 1532, 1543, 1543, 1543, 1544, 1546, 1546,
     1546, 1552, 1552, 1552, 1566, 1542, 1545, 1564, 1550, 1551,
     1561, 1563, 1543, 1557, 1557, 1557, 1546, 1572, 1556, 1552,
     1559, 1559, 1559, 1569, 1561, 1568, 1568, 1568, 1570, 1573,
     1581, 1557, 1565, 1574, 1564, 1567, 1567, 1567, 1559, 1567,
     1575, 1581, 1567, 1568, 1566, 1571, 1571, 1571, 1580, 1584,
     1569, 1585, 1588, 1567, 1586, 1570, 1589, 1572,  915,  906,
     1574, 1591, 1580, 1571, 1578, 1578, 1578, 1575, 1586, 1573,
     1582, 1582, 1582, 1587, 1607, 1591, 1584, 1601, 1585, 1590,
     1590, 1590, 1578, 1592, 1587, 1588, 1601, 1602, 1582, 1589,

     1593, 1593, 1593, 1605, 1592, 1608, 1602, 1590, 1596, 1596,
     1596, 1598, 1598, 1598, 1599, 1599, 1599, 1606, 1593, 1603,
     1603, 1603, 1609, 1610, 1607, 1611, 1596, 1612,  905, 1598,
     1605,  903, 1599, 1613, 1613, 1613,  902, 1603, 1612, 1611,
     1614, 1614, 1614,  901, 1606, 1608,  900,  898,  897, 1609,
     1610, 1613,  896,  895,  894,  893,  891,  890, 1614, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1622, 1622, 1622, 1622, 1622, 1622,

     1622, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1637,

     1637, 1637, 1637, 1637, 1637, 1637, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1641, 1641, 1641,
     1641, 1641, 1641, 1641, 1642, 1642, 1642, 1642, 1642, 1642,
     1642, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1644, 1644,
     1644,  889, 1644, 1645, 1645, 1645,  888, 1645, 1646, 1646,
     1646,  887, 1646, 1647, 1647, 1647,  886, 1647, 1648, 1648,
     1648,  884, 1648, 1649, 1649, 1649,  882, 1649, 1650, 1650,
     1650,  878, 1650, 1651, 1651, 1651,  875, 1651, 1652, 1652,
     1652,  874, 1652, 1653, 1653, 1653,  872, 1653, 1654, 1654,

     1654,  869, 1654, 1655, 1655, 1655,  868, 1655, 1656, 1656,
     1656,  867, 1656, 1657, 1657, 1657, 1657, 1657,  866, 1657,
     1658,  865, 1658, 1659,  864, 1659, 1660,  863, 1660, 1661,
      856, 1661, 1662,  855, 1662, 1663,  853, 1663, 1664,  852,
     1664, 1665,  851, 1665, 1666,  850, 1666, 1667,  846, 1667,
     1668,  845, 1668, 1669,  844, 1669, 1670,  843, 1670, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1672,  842,  841, 1672,
     1673, 1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674,
     1674, 1674, 1675, 1675, 1675, 1675, 1675, 1675, 1676, 1676,
     1676, 1676, 1676, 1676, 1677, 1677, 1677, 1677, 1677, 1677,

     1678, 1678, 1678, 1678, 1678, 1678, 1679, 1679, 1679, 1679,
     1679, 1679, 1680, 1680, 1680, 1680, 1680, 1680, 1681, 1681,
     1681, 1681, 1681, 1681, 1682, 1682, 1682, 1682, 1682, 1682,
     1683, 1683, 1683, 1683, 1683, 1683, 1684, 1684, 1684, 1684,
     1684, 1684, 1685, 1685, 1685, 1685, 1685, 1685, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1692, 1692, 1692, 1692, 1692, 1692, 1692,  839,  838,  837,

      836,  835,  834,  832,  830,  828,  827,  823,  822,  820,
      814,  813,  812,  811,  810,  809,  808,  801,  800,  763,
      762,  761,  756,  752,  744,  743,  741,  724,  723,  722,
      721,  720,  719,  718,  715,  712,  709,  679,  678,  677,
      673,  670,  667,  663,  662,  660,  648,  647,  646,  645,
      644,  643,  642,  640,  638,  637,  597,  596,  595,  589,
      587,  586,  581,  575,  574,  569,  566,  555,  554,  553,
      551,  549,  543,  541,  538,  537,  536,  534,  530,  527,
      526,  525,  524,  521,  520,  515,  514,  513,  510,  509,
      505,  504,  503,  500,  499,  498,  497,  496,  493,  490,

      489,  488,  485,  484,  483,  482,  479,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  465,  464,  462,  461,
      460,  459,  458,  454,  452,  451,  450,  449,  448,  447,
      446,  443,  442,  441,  438,  435,  434,  433,  432,  429,
      428,  427,  424,  423,  419,  418,  417,  416,  415,  414,
      413,  410,  409,  408,  405,  404,  401,  400,  399,  398,
      397,  396,  395,  392,  391,  388,  387,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  372,  371,  370,
      369,  368,  362,  361,  359,  355,  354,  353,  352,  348,
      344,  343,  339,  332,  327,  326,  325,  321,  317,  316,

      312,  309,  304,  294,  293,  292,  291,  287,  274,  267,
      263,  253,  252,  251,  247,  240,  236,  229,  225,  209,
      205,  201,  200,  199,  193,  192,  190,  187,  175, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "amf.l"
#define INITIAL 0
/* Validating XML processor for amf.dtd.
 * Generated 2007/03/15 11:04:14.
 *
 * This program was generated with the FleXML XML processor generator.
 * FleXML is Copyright (C) 1999-2005 Kristoffer Rose.  All rights reserved.
 * FleXML is Copyright (C) 2003-2006 Martin Quinson.  All rights reserved.
 * (Id: flexml.pl,v 1.61 2006/09/13 16:34:33 wdowling Exp).
 * 
 * There are two, intertwined parts to this program, part A and part B.
 *
 * Part A
 * ------
 * 
 * Some parts, here collectively called "Part A", are found in the 
 * FleXML package.  They are Copyright (C) 1999-2005 Kristoffer Rose
 * and Copyright (C) 2003-2006 Martin Quinson. All rights reserved.
 *
 * You can redistribute, use, perform, display and/or modify "Part A"
 * provided the following two conditions hold:
 *
 * 1. The program is distributed WITHOUT ANY WARRANTY from the author of
 *    FleXML; without even the implied warranty of MERCHANTABILITY or
 *    FITNESS FOR A PARTICULAR PURPOSE.
 *
 * 2. The program distribution conditions do not in any way affect the
 *    distribution conditions of the FleXML system used to generate this
 *    file or any version of FleXML derived from that system.
 *
 * Notice that these are explicit rights granted to you for files
 * generated by the FleXML system.  For your rights in connection with
 * the FleXML system itself please consult the GNU General Public License.
 * 
 * Part B
 * ------
 * 
 * The other parts, here collectively called "Part B", and which came 
 * from the DTD used by FleXML to generate this program, can be 
 * distributed (or not, as the case may be) under the terms of whoever
 * wrote them, provided these terms respect and obey the two conditions 
 * above under the heading "Part A".
 *
 * The author of and contributors to FleXML specifically disclaim
 * any copyright interest in "Part B", unless "Part B" was written 
 * by the author of or contributors to FleXML.
 * 
 */
#line 49 "amf.l"

/* Version strings. */
const char rcs_flexml_skeleton[] =
 "$" "Id: skel,v 1.38 2006/09/12 18:05:45 wdowling Exp $";
const char rcs_flexml[] =
 "$" "Id: flexml.pl,v 1.61 2006/09/13 16:34:33 wdowling Exp $";

/* ANSI headers. */
#ifndef _WIN32
#include <unistd.h>
#endif
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <stdarg.h>
#include <ctype.h>

#ifndef FLEXML_INDEXSTACKSIZE
#define FLEXML_INDEXSTACKSIZE 1000
#endif

/* Generated definitions. */
#ifndef FLEXML_BUFFERSTACKSIZE
#define FLEXML_BUFFERSTACKSIZE 100000
#endif

/* XML processor api. */
#include "amf.h"

/* FleXML-provided data. */
int pcdata_ix;
extern char *bufferstack;
#define pcdata (bufferstack + pcdata_ix)
AT_LEVEL_fixedgroupsize AX_LEVEL_fixedgroupsize;
#define A_LEVEL_fixedgroupsize (bufferstack + AX_LEVEL_fixedgroupsize)
AT_LEVEL_size AX_LEVEL_size;
#define A_LEVEL_size (bufferstack + AX_LEVEL_size)
AT_MOLTRAJECTORY_name AX_MOLTRAJECTORY_name;
#define A_MOLTRAJECTORY_name (bufferstack + AX_MOLTRAJECTORY_name)
AT_OBSERVABLE_type AX_OBSERVABLE_type;
#define A_OBSERVABLE_type AX_OBSERVABLE_type
AT_MOLTRAJECTORY_flags AX_MOLTRAJECTORY_flags;
#define A_MOLTRAJECTORY_flags (bufferstack + AX_MOLTRAJECTORY_flags)
AT_LEVEL_reflevel AX_LEVEL_reflevel;
#define A_LEVEL_reflevel (bufferstack + AX_LEVEL_reflevel)
AT_AMF_version AX_AMF_version;
#define A_AMF_version (bufferstack + AX_AMF_version)
AT_ATTRIBUTE_type AX_ATTRIBUTE_type;
#define A_ATTRIBUTE_type AX_ATTRIBUTE_type
AT_ATTRIBUTE_name AX_ATTRIBUTE_name;
#define A_ATTRIBUTE_name (bufferstack + AX_ATTRIBUTE_name)
AT_OBSERVABLE_name AX_OBSERVABLE_name;
#define A_OBSERVABLE_name (bufferstack + AX_OBSERVABLE_name)
AT_MOLECULEBUNDLE_name AX_MOLECULEBUNDLE_name;
#define A_MOLECULEBUNDLE_name (bufferstack + AX_MOLECULEBUNDLE_name)
AT_SCALARFIELD3_dims AX_SCALARFIELD3_dims;
#define A_SCALARFIELD3_dims (bufferstack + AX_SCALARFIELD3_dims)
AT_DATA_size AX_DATA_size;
#define A_DATA_size (bufferstack + AX_DATA_size)
AT_LEVEL_name AX_LEVEL_name;
#define A_LEVEL_name (bufferstack + AX_LEVEL_name)
AT_SCALARFIELD3_bbox AX_SCALARFIELD3_bbox;
#define A_SCALARFIELD3_bbox (bufferstack + AX_SCALARFIELD3_bbox)
AT_DATA_type AX_DATA_type;
#define A_DATA_type AX_DATA_type
AT_SCALARFIELD3_type AX_SCALARFIELD3_type;
#define A_SCALARFIELD3_type AX_SCALARFIELD3_type
AT_MOLECULE_name AX_MOLECULE_name;
#define A_MOLECULE_name (bufferstack + AX_MOLECULE_name)
AT_MOLTRAJECTORY_size AX_MOLTRAJECTORY_size;
#define A_MOLTRAJECTORY_size (bufferstack + AX_MOLTRAJECTORY_size)
AT_SCALARFIELD3_name AX_SCALARFIELD3_name;
#define A_SCALARFIELD3_name (bufferstack + AX_SCALARFIELD3_name)
AT_MOLTRAJECTORYBUNDLE_name AX_MOLTRAJECTORYBUNDLE_name;
#define A_MOLTRAJECTORYBUNDLE_name (bufferstack + AX_MOLTRAJECTORYBUNDLE_name)
AT_DATA_name AX_DATA_name;
#define A_DATA_name (bufferstack + AX_DATA_name)

/* XML state. */
#ifdef FLEX_DEBUG
# define ENTER(state)	debug_enter(state,#state)
# define LEAVE		debug_leave()
# define SET(state)	debug_set(state,#state)
  static void debug_enter(int, const char*);
  static void debug_leave(void);
  static void debug_set(int, const char*);
#else
# define ENTER(state)	(yy_push_state(state))
# define LEAVE		(yy_pop_state())
# define SET(state)	BEGIN(state)
#endif

/* Generic actions. */
#define SKIP	/*skip*/
#define SUCCEED        CLEANUP; return 0

#define FAIL	return fail
static int fail(const char*, ...);

enum {flexml_max_err_msg_size = 512};
static char flexml_err_msg[flexml_max_err_msg_size];
const char * parse_err_msg()
{
    return flexml_err_msg;
}
static void reset_parse_err_msg()
{
    flexml_err_msg[0] = '\0';
}

/* Cleanup */
static void cleanup(void);
#define CLEANUP  cleanup()

/* Text buffer stack handling. */
char *bufferstack = NULL;
static int blimit = FLEXML_BUFFERSTACKSIZE;
static int bnext = 1;

static int *indexstack = NULL;
static int ilimit = FLEXML_INDEXSTACKSIZE;
static int inext = 1;

#define BUFFERSET(P)  (P = bnext)
#define BUFFERPUTC(C) (ck_blimit(), bufferstack[bnext++] = (C))
#define BUFFERDONE    (BUFFERPUTC('\0'))

#define BUFFERLITERAL(C, P) bufferliteral(C, &(P), yytext)

/* after this is called, there are at least 2 slots left in the stack */
static int ck_blimit()
{
     if (bnext >= blimit) {
	 blimit += FLEXML_BUFFERSTACKSIZE + 2;
	 {
	     char *temp = (char *) realloc(bufferstack, blimit);
	     assert(temp);
	     bufferstack = temp;
	 }
     }
     return 0;
}

/* after this is called, there are at least 2 slots left in the stack */
static int ck_ilimit()
{
     if (inext >= ilimit) {
	 ilimit += FLEXML_INDEXSTACKSIZE + 2;
	 {
	     int *temp = (int *) realloc(indexstack, ilimit);
	     assert(temp);
	     indexstack = temp;
	 }
     }
     return 0;
}

#ifdef FLEXML_NEED_BUFFERLIT
static void bufferliteral(char c, int* pp, const char* text)
{
  const char *s = (c ? strchr(text,c) : text-1), *e = strrchr(text,c);
  assert(s <= e); BUFFERSET(*pp);
  while (++s<e) {
    if (isspace(*s) && c) { BUFFERPUTC(' '); while (isspace(*s)) ++s; }
    else BUFFERPUTC(*s);
  }
  BUFFERDONE;
}
#endif

static void pushbuffer(int p)
{
    ck_ilimit();
    indexstack[inext++] = p;
    indexstack[inext++] = bnext;    
}

static int popbuffer(void)
{
    assert(inext >= 2);
    bnext = indexstack[--inext];
    return indexstack[--inext];
}

/* General internal entities are `unput' back onto the input stream... */
#define ENTITYTEXT(T) \
  { char *s = (T), *e = s+strlen(s);\
    while (--e >= s) { unput(*e); }}


/* Flex standard options. */
#define YY_STACK_USED 1
#define YY_NO_TOP_STATE 1
#define YY_NO_INPUT 1
/* Flex user-requested options. */
#define YY_NO_UNPUT 1
/* XML character classes (currently restricted to ASCII). */
/* "Common syntactic structures." */
/* "Names and Tokens." */
/* Miscellaneous. */
/* Parser states (flex `exclusive start conditions'):
 *
 * PROLOG	the XML prolog of the document before <?xml...>
 * DOCTYPE	the XML prolog of the document after <?xml...>
 * EPILOG	after the root element
 * INCOMMENT	inside an XML comment <!--....-->
 * INPI		inside an XML PI <?...?>
 * VALUE1	inside a '...'-delimited literal
 * VALUE2	inside a "..."-delimited literal
 * CDATA	inside a <![CDATA[...] ]> section.
 * ROOT_<tag>	expect root element <tag>
 * AL_<tag>	inside the attribute list for <tag>
 * IN_<tag>	inside a <tag> with element contents (ready for end tag)
 * IMPOSSIBLE	dummy to permit disabling rules; must be last
 */
#define PROLOG 1
#define DOCTYPE 2
#define EPILOG 3
#define INCOMMENT 4
#define INPI 5
#define VALUE1 6
#define VALUE2 7
#define CDATA 8

#define ROOT_AMF 9
#define AL_AMF 10
#define S_AMF 11
#define S_AMF_1 12
#define S_AMF_2 13
#define S_AMF_3 14
#define S_AMF_4 15
#define S_AMF_5 16
#define S_AMF_6 17
#define S_AMF_7 18
#define S_AMF_8 19
#define S_AMF_9 20
#define S_AMF_10 21
#define S_AMF_11 22
#define S_AMF_12 23
#define S_AMF_13 24
#define S_AMF_14 25
#define E_AMF 26

#define ROOT_MOLTRAJECTORYBUNDLE 27
#define AL_MOLTRAJECTORYBUNDLE 28
#define S_MOLTRAJECTORYBUNDLE 29
#define S_MOLTRAJECTORYBUNDLE_1 30
#define S_MOLTRAJECTORYBUNDLE_2 31
#define E_MOLTRAJECTORYBUNDLE 32

#define ROOT_MOLECULEBUNDLE 33
#define AL_MOLECULEBUNDLE 34
#define S_MOLECULEBUNDLE 35
#define S_MOLECULEBUNDLE_1 36
#define S_MOLECULEBUNDLE_2 37
#define E_MOLECULEBUNDLE 38

#define ROOT_MOLTRAJECTORY 39
#define AL_MOLTRAJECTORY 40
#define S_MOLTRAJECTORY 41
#define S_MOLTRAJECTORY_1 42
#define S_MOLTRAJECTORY_2 43
#define S_MOLTRAJECTORY_3 44
#define S_MOLTRAJECTORY_4 45
#define E_MOLTRAJECTORY 46

#define ROOT_MOLECULE 47
#define AL_MOLECULE 48
#define S_MOLECULE 49
#define S_MOLECULE_1 50
#define E_MOLECULE 51

#define ROOT_TOPOLOGY 52
#define AL_TOPOLOGY 53
#define S_TOPOLOGY 54
#define S_TOPOLOGY_1 55
#define S_TOPOLOGY_2 56
#define S_TOPOLOGY_3 57
#define S_TOPOLOGY_4 58
#define S_TOPOLOGY_5 59
#define E_TOPOLOGY 60

#define ROOT_LEVEL 61
#define AL_LEVEL 62
#define S_LEVEL 63
#define S_LEVEL_1 64
#define S_LEVEL_2 65
#define S_LEVEL_3 66
#define E_LEVEL 67

#define ROOT_GROUPS 68
#define AL_GROUPS 69
#define IN_GROUPS 70

#define ROOT_ATTRIBUTE 71
#define AL_ATTRIBUTE 72
#define IN_ATTRIBUTE 73

#define ROOT_DATA 74
#define AL_DATA 75
#define IN_DATA 76

#define ROOT_COORDINATES 77
#define AL_COORDINATES 78
#define IN_COORDINATES 79

#define ROOT_OBSERVABLE 80
#define AL_OBSERVABLE 81
#define IN_OBSERVABLE 82

#define ROOT_SCALARFIELD3 83
#define AL_SCALARFIELD3 84
#define IN_SCALARFIELD3 85

#define IMPOSSIBLE 86

#line 300 "amf.l"
/* State names. */
const char* *statenames=NULL;
#line 2381 "lex.amf_yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 304 "amf.l"


 /* Bypass Flex's default INITIAL state and begin by parsing the XML prolog. */
 SET(PROLOG);
 reset_parse_err_msg();
 bufferstack = (char *) malloc(FLEXML_BUFFERSTACKSIZE);
 assert(bufferstack);
 #ifdef FLEX_DEBUG
 {
     int i;
     for (i = 0; i < blimit; i++) {
         bufferstack[i] = '\377';
     }
 }
 #endif
 bufferstack[0] = '\0';
 indexstack = (int *) malloc(FLEXML_INDEXSTACKSIZE * sizeof(int));
 assert(indexstack);
 indexstack[0] = 0;

  /* FleXML_init */
  bnext = inext = 1;
  if(!statenames) {statenames= (const char **)calloc(IMPOSSIBLE,sizeof(char*));
  statenames[PROLOG] = NULL;
  statenames[DOCTYPE] = NULL;
  statenames[EPILOG] = NULL;
  statenames[INCOMMENT] = NULL;
  statenames[INPI] = NULL;
  statenames[VALUE1] = NULL;
  statenames[VALUE2] = NULL;
  statenames[CDATA] = NULL;
  statenames[ROOT_AMF] = NULL;
  statenames[AL_AMF] = NULL;
  statenames[S_AMF] = "AMF";
  statenames[S_AMF_1] = "AMF";
  statenames[S_AMF_2] = "AMF";
  statenames[S_AMF_3] = "AMF";
  statenames[S_AMF_4] = "AMF";
  statenames[S_AMF_5] = "AMF";
  statenames[S_AMF_6] = "AMF";
  statenames[S_AMF_7] = "AMF";
  statenames[S_AMF_8] = "AMF";
  statenames[S_AMF_9] = "AMF";
  statenames[S_AMF_10] = "AMF";
  statenames[S_AMF_11] = "AMF";
  statenames[S_AMF_12] = "AMF";
  statenames[S_AMF_13] = "AMF";
  statenames[S_AMF_14] = "AMF";
  statenames[E_AMF] = "AMF";
  statenames[ROOT_MOLTRAJECTORYBUNDLE] = NULL;
  statenames[AL_MOLTRAJECTORYBUNDLE] = NULL;
  statenames[S_MOLTRAJECTORYBUNDLE] = "MOLTRAJECTORYBUNDLE";
  statenames[S_MOLTRAJECTORYBUNDLE_1] = "MOLTRAJECTORYBUNDLE";
  statenames[S_MOLTRAJECTORYBUNDLE_2] = "MOLTRAJECTORYBUNDLE";
  statenames[E_MOLTRAJECTORYBUNDLE] = "MOLTRAJECTORYBUNDLE";
  statenames[ROOT_MOLECULEBUNDLE] = NULL;
  statenames[AL_MOLECULEBUNDLE] = NULL;
  statenames[S_MOLECULEBUNDLE] = "MOLECULEBUNDLE";
  statenames[S_MOLECULEBUNDLE_1] = "MOLECULEBUNDLE";
  statenames[S_MOLECULEBUNDLE_2] = "MOLECULEBUNDLE";
  statenames[E_MOLECULEBUNDLE] = "MOLECULEBUNDLE";
  statenames[ROOT_MOLTRAJECTORY] = NULL;
  statenames[AL_MOLTRAJECTORY] = NULL;
  statenames[S_MOLTRAJECTORY] = "MOLTRAJECTORY";
  statenames[S_MOLTRAJECTORY_1] = "MOLTRAJECTORY";
  statenames[S_MOLTRAJECTORY_2] = "MOLTRAJECTORY";
  statenames[S_MOLTRAJECTORY_3] = "MOLTRAJECTORY";
  statenames[S_MOLTRAJECTORY_4] = "MOLTRAJECTORY";
  statenames[E_MOLTRAJECTORY] = "MOLTRAJECTORY";
  statenames[ROOT_MOLECULE] = NULL;
  statenames[AL_MOLECULE] = NULL;
  statenames[S_MOLECULE] = "MOLECULE";
  statenames[S_MOLECULE_1] = "MOLECULE";
  statenames[E_MOLECULE] = "MOLECULE";
  statenames[ROOT_TOPOLOGY] = NULL;
  statenames[AL_TOPOLOGY] = NULL;
  statenames[S_TOPOLOGY] = "TOPOLOGY";
  statenames[S_TOPOLOGY_1] = "TOPOLOGY";
  statenames[S_TOPOLOGY_2] = "TOPOLOGY";
  statenames[S_TOPOLOGY_3] = "TOPOLOGY";
  statenames[S_TOPOLOGY_4] = "TOPOLOGY";
  statenames[S_TOPOLOGY_5] = "TOPOLOGY";
  statenames[E_TOPOLOGY] = "TOPOLOGY";
  statenames[ROOT_LEVEL] = NULL;
  statenames[AL_LEVEL] = NULL;
  statenames[S_LEVEL] = "LEVEL";
  statenames[S_LEVEL_1] = "LEVEL";
  statenames[S_LEVEL_2] = "LEVEL";
  statenames[S_LEVEL_3] = "LEVEL";
  statenames[E_LEVEL] = "LEVEL";
  statenames[ROOT_GROUPS] = NULL;
  statenames[AL_GROUPS] = NULL;
  statenames[IN_GROUPS] = "GROUPS";
  statenames[ROOT_ATTRIBUTE] = NULL;
  statenames[AL_ATTRIBUTE] = NULL;
  statenames[IN_ATTRIBUTE] = "ATTRIBUTE";
  statenames[ROOT_DATA] = NULL;
  statenames[AL_DATA] = NULL;
  statenames[IN_DATA] = "DATA";
  statenames[ROOT_COORDINATES] = NULL;
  statenames[AL_COORDINATES] = NULL;
  statenames[IN_COORDINATES] = "COORDINATES";
  statenames[ROOT_OBSERVABLE] = NULL;
  statenames[AL_OBSERVABLE] = NULL;
  statenames[IN_OBSERVABLE] = "OBSERVABLE";
  statenames[ROOT_SCALARFIELD3] = NULL;
  statenames[AL_SCALARFIELD3] = NULL;
  statenames[IN_SCALARFIELD3] = "SCALARFIELD3";
  }

 /* COMMENTS and PIs: handled uniformly for efficiency. */

#line 2656 "lex.amf_yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1617 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4830 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;


case 1:
YY_RULE_SETUP
#line 417 "amf.l"
ENTER(INCOMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 418 "amf.l"
ENTER(INPI);
	YY_BREAK


case 3:
YY_RULE_SETUP
#line 421 "amf.l"
LEAVE;
	YY_BREAK
case 4:
#line 423 "amf.l"
case 5:
#line 424 "amf.l"
case 6:
YY_RULE_SETUP
#line 424 "amf.l"
SKIP;
	YY_BREAK
case YY_STATE_EOF(INCOMMENT):
#line 425 "amf.l"
FAIL("EOF in comment.");
	YY_BREAK


case 7:
YY_RULE_SETUP
#line 428 "amf.l"
LEAVE;
	YY_BREAK
case 8:
#line 430 "amf.l"
case 9:
YY_RULE_SETUP
#line 430 "amf.l"
SKIP;
	YY_BREAK
case YY_STATE_EOF(INPI):
#line 431 "amf.l"
FAIL("EOF in PI (processing instruction).");
	YY_BREAK

/* SPACES: skipped uniformly */
case 10:
YY_RULE_SETUP
#line 436 "amf.l"
SKIP;
	YY_BREAK
/* PROLOG: determine root element and process it. */

case 11:
YY_RULE_SETUP
#line 441 "amf.l"
SET(DOCTYPE); 
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 442 "amf.l"
FAIL("Bad declaration %s.",yytext);
	YY_BREAK


case 13:
YY_RULE_SETUP
#line 446 "amf.l"
SET(ROOT_MOLTRAJECTORYBUNDLE);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 447 "amf.l"
SET(ROOT_MOLECULE);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 448 "amf.l"
SET(ROOT_MOLTRAJECTORY);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 449 "amf.l"
SET(ROOT_AMF);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 450 "amf.l"
SET(ROOT_SCALARFIELD3);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 451 "amf.l"
SET(ROOT_COORDINATES);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 452 "amf.l"
SET(ROOT_OBSERVABLE);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 453 "amf.l"
SET(ROOT_TOPOLOGY);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 454 "amf.l"
SET(ROOT_MOLECULEBUNDLE);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 455 "amf.l"
SET(ROOT_DATA);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 456 "amf.l"
SET(ROOT_LEVEL);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 457 "amf.l"
SET(ROOT_GROUPS);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 458 "amf.l"
SET(ROOT_ATTRIBUTE);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 459 "amf.l"
FAIL("Bad declaration %s.",yytext);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 460 "amf.l"
FAIL("Unexpected character `%c' in prolog.", yytext[0]);
	YY_BREAK
case YY_STATE_EOF(PROLOG):
case YY_STATE_EOF(DOCTYPE):
#line 461 "amf.l"
FAIL("EOF in prolog.");
	YY_BREAK

/* RULES DERIVED FROM DTD. */
/*     version CDATA #REQUIRED>  */
case 28:
YY_RULE_SETUP
#line 468 "amf.l"
{
  AX_AMF_version = 0;
  ENTER(AL_AMF); pushbuffer(0);
  }
	YY_BREAK

case 29:
YY_RULE_SETUP
#line 474 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_AMF_version);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 475 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_AMF_version);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 477 "amf.l"
{
  if (!AX_AMF_version) FAIL("Required attribute `version' not set for `AMF' element.");
  LEAVE; STag_AMF();pcdata_ix = 0; ENTER(S_AMF);
 }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 481 "amf.l"
{
  if (!AX_AMF_version) FAIL("Required attribute `version' not set for `AMF' element.");
  LEAVE; STag_AMF(); pcdata_ix = 0; ETag_AMF(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_AMF: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 488 "amf.l"
FAIL("Unexpected character `%c' in attribute list of AMF element.", yytext[0]);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 489 "amf.l"
FAIL("Bad attribute `%s' in `AMF' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_AMF):
#line 490 "amf.l"
FAIL("EOF in attribute list of `AMF' element.");
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 494 "amf.l"
{
  LEAVE;
  ETag_AMF();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_AMF: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 502 "amf.l"
FAIL("Unexpected end-tag `%s': `</AMF>' expected.",yytext);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 503 "amf.l"
FAIL("Unexpected character `%c': `</AMF>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_AMF_10):
case YY_STATE_EOF(S_AMF_1):
case YY_STATE_EOF(S_AMF_14):
case YY_STATE_EOF(S_AMF_12):
case YY_STATE_EOF(S_AMF):
case YY_STATE_EOF(S_AMF_6):
case YY_STATE_EOF(S_AMF_7):
case YY_STATE_EOF(S_AMF_3):
case YY_STATE_EOF(E_AMF):
case YY_STATE_EOF(S_AMF_9):
case YY_STATE_EOF(S_AMF_4):
#line 504 "amf.l"
FAIL("Premature EOF: `</AMF>' expected.");
	YY_BREAK

/*     name CDATA #REQUIRED>  */
case 38:
YY_RULE_SETUP
#line 509 "amf.l"
{
  AX_MOLTRAJECTORYBUNDLE_name = 0;
  ENTER(AL_MOLTRAJECTORYBUNDLE); pushbuffer(0);
  }
	YY_BREAK

case 39:
YY_RULE_SETUP
#line 515 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_MOLTRAJECTORYBUNDLE_name);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 516 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_MOLTRAJECTORYBUNDLE_name);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 518 "amf.l"
{
  if (!AX_MOLTRAJECTORYBUNDLE_name) FAIL("Required attribute `name' not set for `MOLTRAJECTORYBUNDLE' element.");
  LEAVE; STag_MOLTRAJECTORYBUNDLE();pcdata_ix = 0; ENTER(S_MOLTRAJECTORYBUNDLE);
 }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 522 "amf.l"
{
  if (!AX_MOLTRAJECTORYBUNDLE_name) FAIL("Required attribute `name' not set for `MOLTRAJECTORYBUNDLE' element.");
  LEAVE; STag_MOLTRAJECTORYBUNDLE(); pcdata_ix = 0; ETag_MOLTRAJECTORYBUNDLE(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_AMF_1: case S_AMF_5: case S_AMF: case S_AMF_6: case S_AMF_3: SET(S_AMF_6); break;
   case ROOT_MOLTRAJECTORYBUNDLE: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 530 "amf.l"
FAIL("Unexpected character `%c' in attribute list of MOLTRAJECTORYBUNDLE element.", yytext[0]);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 531 "amf.l"
FAIL("Bad attribute `%s' in `MOLTRAJECTORYBUNDLE' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_MOLTRAJECTORYBUNDLE):
#line 532 "amf.l"
FAIL("EOF in attribute list of `MOLTRAJECTORYBUNDLE' element.");
	YY_BREAK


case 45:
YY_RULE_SETUP
#line 536 "amf.l"
{
  LEAVE;
  ETag_MOLTRAJECTORYBUNDLE();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_AMF_1: case S_AMF_5: case S_AMF: case S_AMF_6: case S_AMF_3: SET(S_AMF_6); break;
   case ROOT_MOLTRAJECTORYBUNDLE: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 545 "amf.l"
FAIL("Unexpected end-tag `%s': `</MOLTRAJECTORYBUNDLE>' expected.",yytext);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 546 "amf.l"
FAIL("Unexpected character `%c': `</MOLTRAJECTORYBUNDLE>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_MOLTRAJECTORYBUNDLE_2):
case YY_STATE_EOF(E_MOLTRAJECTORYBUNDLE):
case YY_STATE_EOF(S_MOLTRAJECTORYBUNDLE):
#line 547 "amf.l"
FAIL("Premature EOF: `</MOLTRAJECTORYBUNDLE>' expected.");
	YY_BREAK

/*     name CDATA #REQUIRED>  */
case 48:
YY_RULE_SETUP
#line 552 "amf.l"
{
  AX_MOLECULEBUNDLE_name = 0;
  ENTER(AL_MOLECULEBUNDLE); pushbuffer(0);
  }
	YY_BREAK

case 49:
YY_RULE_SETUP
#line 558 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_MOLECULEBUNDLE_name);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 559 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_MOLECULEBUNDLE_name);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 561 "amf.l"
{
  if (!AX_MOLECULEBUNDLE_name) FAIL("Required attribute `name' not set for `MOLECULEBUNDLE' element.");
  LEAVE; STag_MOLECULEBUNDLE();pcdata_ix = 0; ENTER(S_MOLECULEBUNDLE);
 }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 565 "amf.l"
{
  if (!AX_MOLECULEBUNDLE_name) FAIL("Required attribute `name' not set for `MOLECULEBUNDLE' element.");
  LEAVE; STag_MOLECULEBUNDLE(); pcdata_ix = 0; ETag_MOLECULEBUNDLE(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_MOLECULEBUNDLE: SET(EPILOG); break;
   case S_AMF_2: case S_AMF: case S_AMF_3: SET(S_AMF_3); break;
  }
 }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 573 "amf.l"
FAIL("Unexpected character `%c' in attribute list of MOLECULEBUNDLE element.", yytext[0]);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 574 "amf.l"
FAIL("Bad attribute `%s' in `MOLECULEBUNDLE' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_MOLECULEBUNDLE):
#line 575 "amf.l"
FAIL("EOF in attribute list of `MOLECULEBUNDLE' element.");
	YY_BREAK


case 55:
YY_RULE_SETUP
#line 579 "amf.l"
{
  LEAVE;
  ETag_MOLECULEBUNDLE();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_MOLECULEBUNDLE: SET(EPILOG); break;
   case S_AMF_2: case S_AMF: case S_AMF_3: SET(S_AMF_3); break;
  }
 }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 588 "amf.l"
FAIL("Unexpected end-tag `%s': `</MOLECULEBUNDLE>' expected.",yytext);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 589 "amf.l"
FAIL("Unexpected character `%c': `</MOLECULEBUNDLE>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_MOLECULEBUNDLE_2):
case YY_STATE_EOF(S_MOLECULEBUNDLE):
case YY_STATE_EOF(E_MOLECULEBUNDLE):
#line 590 "amf.l"
FAIL("Premature EOF: `</MOLECULEBUNDLE>' expected.");
	YY_BREAK

/*     name CDATA #REQUIRED
  *     size CDATA #REQUIRED
  *     flags CDATA #IMPLIED>  */
case 58:
YY_RULE_SETUP
#line 597 "amf.l"
{
  AX_MOLTRAJECTORY_name = 0;
  AX_MOLTRAJECTORY_size = 0;
  AX_MOLTRAJECTORY_flags = 0;
  ENTER(AL_MOLTRAJECTORY); pushbuffer(0);
  }
	YY_BREAK

case 59:
YY_RULE_SETUP
#line 605 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_MOLTRAJECTORY_name);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 606 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_MOLTRAJECTORY_name);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 608 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_MOLTRAJECTORY_size);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 609 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_MOLTRAJECTORY_size);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 611 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_MOLTRAJECTORY_flags);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 612 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_MOLTRAJECTORY_flags);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 614 "amf.l"
{
  if (!AX_MOLTRAJECTORY_name) FAIL("Required attribute `name' not set for `MOLTRAJECTORY' element.");
  if (!AX_MOLTRAJECTORY_size) FAIL("Required attribute `size' not set for `MOLTRAJECTORY' element.");
  LEAVE; STag_MOLTRAJECTORY();pcdata_ix = 0; ENTER(S_MOLTRAJECTORY);
 }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 619 "amf.l"
FAIL("`MOLTRAJECTORY' element cannot be empty.");
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 620 "amf.l"
FAIL("Unexpected character `%c' in attribute list of MOLTRAJECTORY element.", yytext[0]);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 621 "amf.l"
FAIL("Bad attribute `%s' in `MOLTRAJECTORY' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_MOLTRAJECTORY):
#line 622 "amf.l"
FAIL("EOF in attribute list of `MOLTRAJECTORY' element.");
	YY_BREAK


case 69:
YY_RULE_SETUP
#line 626 "amf.l"
{
  LEAVE;
  ETag_MOLTRAJECTORY();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_MOLTRAJECTORYBUNDLE_2: case S_MOLTRAJECTORYBUNDLE: case S_MOLTRAJECTORYBUNDLE_1: SET(S_MOLTRAJECTORYBUNDLE_2); break;
   case S_AMF_1: case S_AMF_8: case S_AMF: case S_AMF_6: case S_AMF_3: case S_AMF_9: case S_AMF_4: SET(S_AMF_9); break;
   case ROOT_MOLTRAJECTORY: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 636 "amf.l"
FAIL("Unexpected end-tag `%s': `</MOLTRAJECTORY>' expected.",yytext);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 637 "amf.l"
FAIL("Unexpected character `%c': `</MOLTRAJECTORY>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_MOLTRAJECTORY_1):
case YY_STATE_EOF(E_MOLTRAJECTORY):
case YY_STATE_EOF(S_MOLTRAJECTORY_2):
case YY_STATE_EOF(S_MOLTRAJECTORY_4):
#line 638 "amf.l"
FAIL("Premature EOF: `</MOLTRAJECTORY>' expected.");
	YY_BREAK

/*     name CDATA #REQUIRED>  */
case 72:
YY_RULE_SETUP
#line 643 "amf.l"
{
  AX_MOLECULE_name = 0;
  ENTER(AL_MOLECULE); pushbuffer(0);
  }
	YY_BREAK

case 73:
YY_RULE_SETUP
#line 649 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_MOLECULE_name);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 650 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_MOLECULE_name);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 652 "amf.l"
{
  if (!AX_MOLECULE_name) FAIL("Required attribute `name' not set for `MOLECULE' element.");
  LEAVE; STag_MOLECULE();pcdata_ix = 0; ENTER(S_MOLECULE);
 }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 656 "amf.l"
FAIL("`MOLECULE' element cannot be empty.");
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 657 "amf.l"
FAIL("Unexpected character `%c' in attribute list of MOLECULE element.", yytext[0]);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 658 "amf.l"
FAIL("Bad attribute `%s' in `MOLECULE' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_MOLECULE):
#line 659 "amf.l"
FAIL("EOF in attribute list of `MOLECULE' element.");
	YY_BREAK


case 79:
YY_RULE_SETUP
#line 663 "amf.l"
{
  LEAVE;
  ETag_MOLECULE();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_AMF_1: case S_AMF_12: case S_AMF: case S_AMF_6: case S_AMF_7: case S_AMF_3: case S_AMF_9: case S_AMF_4: case S_AMF_11: SET(S_AMF_12); break;
   case ROOT_MOLECULE: SET(EPILOG); break;
   case S_MOLECULEBUNDLE_2: case S_MOLECULEBUNDLE: case S_MOLECULEBUNDLE_1: SET(S_MOLECULEBUNDLE_2); break;
  }
 }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 673 "amf.l"
FAIL("Unexpected end-tag `%s': `</MOLECULE>' expected.",yytext);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 674 "amf.l"
FAIL("Unexpected character `%c': `</MOLECULE>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_MOLECULE_1):
case YY_STATE_EOF(E_MOLECULE):
#line 675 "amf.l"
FAIL("Premature EOF: `</MOLECULE>' expected.");
	YY_BREAK

case 82:
YY_RULE_SETUP
#line 678 "amf.l"
{
  ENTER(AL_TOPOLOGY); pushbuffer(0);
  }
	YY_BREAK

case 83:
YY_RULE_SETUP
#line 683 "amf.l"
{
  LEAVE; STag_TOPOLOGY();pcdata_ix = 0; ENTER(S_TOPOLOGY);
 }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 686 "amf.l"
FAIL("`TOPOLOGY' element cannot be empty.");
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 687 "amf.l"
FAIL("Unexpected character `%c' in attribute list of TOPOLOGY element.", yytext[0]);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 688 "amf.l"
FAIL("Bad attribute `%s' in `TOPOLOGY' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_TOPOLOGY):
#line 689 "amf.l"
FAIL("EOF in attribute list of `TOPOLOGY' element.");
	YY_BREAK


case 87:
YY_RULE_SETUP
#line 693 "amf.l"
{
  LEAVE;
  ETag_TOPOLOGY();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_MOLTRAJECTORY: SET(S_MOLTRAJECTORY_1); break;
   case S_MOLECULE: SET(S_MOLECULE_1); break;
   case ROOT_TOPOLOGY: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 703 "amf.l"
FAIL("Unexpected end-tag `%s': `</TOPOLOGY>' expected.",yytext);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 704 "amf.l"
FAIL("Unexpected character `%c': `</TOPOLOGY>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_TOPOLOGY_3):
case YY_STATE_EOF(S_TOPOLOGY_1):
case YY_STATE_EOF(E_TOPOLOGY):
case YY_STATE_EOF(S_TOPOLOGY_5):
#line 705 "amf.l"
FAIL("Premature EOF: `</TOPOLOGY>' expected.");
	YY_BREAK

/*     name CDATA #REQUIRED
  *     size CDATA #REQUIRED
  *     reflevel CDATA #IMPLIED
  *     fixedgroupsize CDATA #IMPLIED>  */
case 90:
YY_RULE_SETUP
#line 713 "amf.l"
{
  AX_LEVEL_name = 0;
  AX_LEVEL_size = 0;
  AX_LEVEL_reflevel = 0;
  AX_LEVEL_fixedgroupsize = 0;
  ENTER(AL_LEVEL); pushbuffer(0);
  }
	YY_BREAK

case 91:
YY_RULE_SETUP
#line 722 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_LEVEL_name);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 723 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_LEVEL_name);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 725 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_LEVEL_size);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 726 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_LEVEL_size);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 728 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_LEVEL_reflevel);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 729 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_LEVEL_reflevel);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 731 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_LEVEL_fixedgroupsize);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 732 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_LEVEL_fixedgroupsize);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 734 "amf.l"
{
  if (!AX_LEVEL_name) FAIL("Required attribute `name' not set for `LEVEL' element.");
  if (!AX_LEVEL_size) FAIL("Required attribute `size' not set for `LEVEL' element.");
  LEAVE; STag_LEVEL();pcdata_ix = 0; ENTER(S_LEVEL);
 }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 739 "amf.l"
{
  if (!AX_LEVEL_name) FAIL("Required attribute `name' not set for `LEVEL' element.");
  if (!AX_LEVEL_size) FAIL("Required attribute `size' not set for `LEVEL' element.");
  LEAVE; STag_LEVEL(); pcdata_ix = 0; ETag_LEVEL(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_LEVEL: SET(EPILOG); break;
   case S_TOPOLOGY: case S_TOPOLOGY_2: case S_TOPOLOGY_3: SET(S_TOPOLOGY_3); break;
  }
 }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 748 "amf.l"
FAIL("Unexpected character `%c' in attribute list of LEVEL element.", yytext[0]);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 749 "amf.l"
FAIL("Bad attribute `%s' in `LEVEL' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_LEVEL):
#line 750 "amf.l"
FAIL("EOF in attribute list of `LEVEL' element.");
	YY_BREAK


case 103:
YY_RULE_SETUP
#line 754 "amf.l"
{
  LEAVE;
  ETag_LEVEL();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_LEVEL: SET(EPILOG); break;
   case S_TOPOLOGY: case S_TOPOLOGY_2: case S_TOPOLOGY_3: SET(S_TOPOLOGY_3); break;
  }
 }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 763 "amf.l"
FAIL("Unexpected end-tag `%s': `</LEVEL>' expected.",yytext);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 764 "amf.l"
FAIL("Unexpected character `%c': `</LEVEL>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_LEVEL):
case YY_STATE_EOF(S_LEVEL):
case YY_STATE_EOF(S_LEVEL_1):
case YY_STATE_EOF(S_LEVEL_3):
#line 765 "amf.l"
FAIL("Premature EOF: `</LEVEL>' expected.");
	YY_BREAK

case 106:
YY_RULE_SETUP
#line 768 "amf.l"
{
  ENTER(AL_GROUPS); pushbuffer(0);
  }
	YY_BREAK

case 107:
YY_RULE_SETUP
#line 773 "amf.l"
{
  LEAVE; STag_GROUPS();pushbuffer(pcdata_ix); BUFFERSET(pcdata_ix);; ENTER(IN_GROUPS);
 }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 776 "amf.l"
{
  LEAVE; STag_GROUPS(); pcdata_ix = 0; ETag_GROUPS(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_GROUPS: SET(EPILOG); break;
   case S_LEVEL: SET(S_LEVEL_1); break;
  }
 }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 783 "amf.l"
FAIL("Unexpected character `%c' in attribute list of GROUPS element.", yytext[0]);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 784 "amf.l"
FAIL("Bad attribute `%s' in `GROUPS' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_GROUPS):
#line 785 "amf.l"
FAIL("EOF in attribute list of `GROUPS' element.");
	YY_BREAK


case 111:
YY_RULE_SETUP
#line 789 "amf.l"
{
  LEAVE;
  BUFFERDONE;
  ETag_GROUPS();
  pcdata_ix = popbuffer();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_GROUPS: SET(EPILOG); break;
   case S_LEVEL: SET(S_LEVEL_1); break;
  }
 }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 800 "amf.l"
FAIL("Unexpected end-tag `%s': `</GROUPS>' expected.",yytext);
	YY_BREAK
case YY_STATE_EOF(IN_GROUPS):
#line 801 "amf.l"
FAIL("Premature EOF: `</GROUPS>' expected.");
	YY_BREAK

/*     name CDATA #REQUIRED
  *     type (int32|float|string) #REQUIRED>  */
case 113:
YY_RULE_SETUP
#line 807 "amf.l"
{
  AX_ATTRIBUTE_name = 0;
  AX_ATTRIBUTE_type = AU_ATTRIBUTE_type;
  ENTER(AL_ATTRIBUTE); pushbuffer(0);
  }
	YY_BREAK

case 114:
YY_RULE_SETUP
#line 814 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_ATTRIBUTE_name);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 815 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_ATTRIBUTE_name);
	YY_BREAK
case 116:
#line 818 "amf.l"
case 117:
YY_RULE_SETUP
#line 818 "amf.l"
A_ATTRIBUTE_type = A_ATTRIBUTE_type_int32;
	YY_BREAK
case 118:
#line 820 "amf.l"
case 119:
YY_RULE_SETUP
#line 820 "amf.l"
A_ATTRIBUTE_type = A_ATTRIBUTE_type_float;
	YY_BREAK
case 120:
#line 822 "amf.l"
case 121:
YY_RULE_SETUP
#line 822 "amf.l"
A_ATTRIBUTE_type = A_ATTRIBUTE_type_string;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 824 "amf.l"
{
  if (!AX_ATTRIBUTE_name) FAIL("Required attribute `name' not set for `ATTRIBUTE' element.");
  if (!AX_ATTRIBUTE_type) FAIL("Required attribute `type' not set for `ATTRIBUTE' element.");
  LEAVE; STag_ATTRIBUTE();pushbuffer(pcdata_ix); BUFFERSET(pcdata_ix);; ENTER(IN_ATTRIBUTE);
 }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 829 "amf.l"
{
  if (!AX_ATTRIBUTE_name) FAIL("Required attribute `name' not set for `ATTRIBUTE' element.");
  if (!AX_ATTRIBUTE_type) FAIL("Required attribute `type' not set for `ATTRIBUTE' element.");
  LEAVE; STag_ATTRIBUTE(); pcdata_ix = 0; ETag_ATTRIBUTE(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_ATTRIBUTE: SET(EPILOG); break;
   case S_LEVEL: case S_LEVEL_2: case S_LEVEL_1: case S_LEVEL_3: SET(S_LEVEL_3); break;
  }
 }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 838 "amf.l"
FAIL("Unexpected character `%c' in attribute list of ATTRIBUTE element.", yytext[0]);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 839 "amf.l"
FAIL("Bad attribute `%s' in `ATTRIBUTE' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_ATTRIBUTE):
#line 840 "amf.l"
FAIL("EOF in attribute list of `ATTRIBUTE' element.");
	YY_BREAK


case 126:
YY_RULE_SETUP
#line 844 "amf.l"
{
  LEAVE;
  BUFFERDONE;
  ETag_ATTRIBUTE();
  pcdata_ix = popbuffer();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_ATTRIBUTE: SET(EPILOG); break;
   case S_LEVEL: case S_LEVEL_2: case S_LEVEL_1: case S_LEVEL_3: SET(S_LEVEL_3); break;
  }
 }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 855 "amf.l"
FAIL("Unexpected end-tag `%s': `</ATTRIBUTE>' expected.",yytext);
	YY_BREAK
case YY_STATE_EOF(IN_ATTRIBUTE):
#line 856 "amf.l"
FAIL("Premature EOF: `</ATTRIBUTE>' expected.");
	YY_BREAK

/*     name CDATA #REQUIRED
  *     type (int32|float|string) #REQUIRED
  *     size CDATA #REQUIRED>  */
case 128:
YY_RULE_SETUP
#line 863 "amf.l"
{
  AX_DATA_name = 0;
  AX_DATA_type = AU_DATA_type;
  AX_DATA_size = 0;
  ENTER(AL_DATA); pushbuffer(0);
  }
	YY_BREAK

case 129:
YY_RULE_SETUP
#line 871 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_DATA_name);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 872 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_DATA_name);
	YY_BREAK
case 131:
#line 875 "amf.l"
case 132:
YY_RULE_SETUP
#line 875 "amf.l"
A_DATA_type = A_DATA_type_int32;
	YY_BREAK
case 133:
#line 877 "amf.l"
case 134:
YY_RULE_SETUP
#line 877 "amf.l"
A_DATA_type = A_DATA_type_float;
	YY_BREAK
case 135:
#line 879 "amf.l"
case 136:
YY_RULE_SETUP
#line 879 "amf.l"
A_DATA_type = A_DATA_type_string;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 881 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_DATA_size);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 882 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_DATA_size);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 884 "amf.l"
{
  if (!AX_DATA_name) FAIL("Required attribute `name' not set for `DATA' element.");
  if (!AX_DATA_type) FAIL("Required attribute `type' not set for `DATA' element.");
  LEAVE; STag_DATA();pushbuffer(pcdata_ix); BUFFERSET(pcdata_ix);; ENTER(IN_DATA);
 }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 890 "amf.l"
{
  if (!AX_DATA_name) FAIL("Required attribute `name' not set for `DATA' element.");
  if (!AX_DATA_type) FAIL("Required attribute `type' not set for `DATA' element.");
  if (!AX_DATA_size) FAIL("Required attribute `size' not set for `DATA' element.");
  LEAVE; STag_DATA(); pcdata_ix = 0; ETag_DATA(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_DATA: SET(EPILOG); break;
   case S_TOPOLOGY_3: case S_TOPOLOGY_1: case S_TOPOLOGY_4: case S_TOPOLOGY_5: SET(S_TOPOLOGY_5); break;
  }
 }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 900 "amf.l"
FAIL("Unexpected character `%c' in attribute list of DATA element.", yytext[0]);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 901 "amf.l"
FAIL("Bad attribute `%s' in `DATA' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_DATA):
#line 902 "amf.l"
FAIL("EOF in attribute list of `DATA' element.");
	YY_BREAK


case 143:
YY_RULE_SETUP
#line 906 "amf.l"
{
  LEAVE;
  BUFFERDONE;
  ETag_DATA();
  pcdata_ix = popbuffer();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_DATA: SET(EPILOG); break;
   case S_TOPOLOGY_3: case S_TOPOLOGY_1: case S_TOPOLOGY_4: case S_TOPOLOGY_5: SET(S_TOPOLOGY_5); break;
  }
 }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 917 "amf.l"
FAIL("Unexpected end-tag `%s': `</DATA>' expected.",yytext);
	YY_BREAK
case YY_STATE_EOF(IN_DATA):
#line 918 "amf.l"
FAIL("Premature EOF: `</DATA>' expected.");
	YY_BREAK

case 145:
YY_RULE_SETUP
#line 921 "amf.l"
{
  ENTER(AL_COORDINATES); pushbuffer(0);
  }
	YY_BREAK

case 146:
YY_RULE_SETUP
#line 926 "amf.l"
{
  LEAVE; STag_COORDINATES();pushbuffer(pcdata_ix); BUFFERSET(pcdata_ix);; ENTER(IN_COORDINATES);
 }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 929 "amf.l"
{
  LEAVE; STag_COORDINATES(); pcdata_ix = 0; ETag_COORDINATES(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_MOLECULE_1: SET(E_MOLECULE); break;
   case S_MOLTRAJECTORY_1: SET(S_MOLTRAJECTORY_2); break;
   case ROOT_COORDINATES: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 937 "amf.l"
FAIL("Unexpected character `%c' in attribute list of COORDINATES element.", yytext[0]);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 938 "amf.l"
FAIL("Bad attribute `%s' in `COORDINATES' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_COORDINATES):
#line 939 "amf.l"
FAIL("EOF in attribute list of `COORDINATES' element.");
	YY_BREAK


case 150:
YY_RULE_SETUP
#line 943 "amf.l"
{
  LEAVE;
  BUFFERDONE;
  ETag_COORDINATES();
  pcdata_ix = popbuffer();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_MOLECULE_1: SET(E_MOLECULE); break;
   case S_MOLTRAJECTORY_1: SET(S_MOLTRAJECTORY_2); break;
   case ROOT_COORDINATES: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 955 "amf.l"
FAIL("Unexpected end-tag `%s': `</COORDINATES>' expected.",yytext);
	YY_BREAK
case YY_STATE_EOF(IN_COORDINATES):
#line 956 "amf.l"
FAIL("Premature EOF: `</COORDINATES>' expected.");
	YY_BREAK

/*     name CDATA #REQUIRED
  *     type (int32|float) #REQUIRED>  */
case 152:
YY_RULE_SETUP
#line 962 "amf.l"
{
  AX_OBSERVABLE_name = 0;
  AX_OBSERVABLE_type = AU_OBSERVABLE_type;
  ENTER(AL_OBSERVABLE); pushbuffer(0);
  }
	YY_BREAK

case 153:
YY_RULE_SETUP
#line 969 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_OBSERVABLE_name);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 970 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_OBSERVABLE_name);
	YY_BREAK
case 155:
#line 973 "amf.l"
case 156:
YY_RULE_SETUP
#line 973 "amf.l"
A_OBSERVABLE_type = A_OBSERVABLE_type_int32;
	YY_BREAK
case 157:
#line 975 "amf.l"
case 158:
YY_RULE_SETUP
#line 975 "amf.l"
A_OBSERVABLE_type = A_OBSERVABLE_type_float;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 977 "amf.l"
{
  if (!AX_OBSERVABLE_name) FAIL("Required attribute `name' not set for `OBSERVABLE' element.");
  if (!AX_OBSERVABLE_type) FAIL("Required attribute `type' not set for `OBSERVABLE' element.");
  LEAVE; STag_OBSERVABLE();pushbuffer(pcdata_ix); BUFFERSET(pcdata_ix);; ENTER(IN_OBSERVABLE);
 }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 982 "amf.l"
{
  if (!AX_OBSERVABLE_name) FAIL("Required attribute `name' not set for `OBSERVABLE' element.");
  if (!AX_OBSERVABLE_type) FAIL("Required attribute `type' not set for `OBSERVABLE' element.");
  LEAVE; STag_OBSERVABLE(); pcdata_ix = 0; ETag_OBSERVABLE(); popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_OBSERVABLE: SET(EPILOG); break;
   case S_MOLTRAJECTORY_1: case S_MOLTRAJECTORY_2: case S_MOLTRAJECTORY_3: case S_MOLTRAJECTORY_4: SET(S_MOLTRAJECTORY_4); break;
  }
 }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 991 "amf.l"
FAIL("Unexpected character `%c' in attribute list of OBSERVABLE element.", yytext[0]);
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 992 "amf.l"
FAIL("Bad attribute `%s' in `OBSERVABLE' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_OBSERVABLE):
#line 993 "amf.l"
FAIL("EOF in attribute list of `OBSERVABLE' element.");
	YY_BREAK


case 163:
YY_RULE_SETUP
#line 997 "amf.l"
{
  LEAVE;
  BUFFERDONE;
  ETag_OBSERVABLE();
  pcdata_ix = popbuffer();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case ROOT_OBSERVABLE: SET(EPILOG); break;
   case S_MOLTRAJECTORY_1: case S_MOLTRAJECTORY_2: case S_MOLTRAJECTORY_3: case S_MOLTRAJECTORY_4: SET(S_MOLTRAJECTORY_4); break;
  }
 }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1008 "amf.l"
FAIL("Unexpected end-tag `%s': `</OBSERVABLE>' expected.",yytext);
	YY_BREAK
case YY_STATE_EOF(IN_OBSERVABLE):
#line 1009 "amf.l"
FAIL("Premature EOF: `</OBSERVABLE>' expected.");
	YY_BREAK

/*     name CDATA #REQUIRED
  *     type (float) #REQUIRED
  *     dims CDATA #REQUIRED
  *     bbox CDATA #REQUIRED>  */
case 165:
YY_RULE_SETUP
#line 1017 "amf.l"
{
  AX_SCALARFIELD3_name = 0;
  AX_SCALARFIELD3_type = AU_SCALARFIELD3_type;
  AX_SCALARFIELD3_dims = 0;
  AX_SCALARFIELD3_bbox = 0;
  ENTER(AL_SCALARFIELD3); pushbuffer(0);
  }
	YY_BREAK

case 166:
YY_RULE_SETUP
#line 1026 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_SCALARFIELD3_name);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1027 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_SCALARFIELD3_name);
	YY_BREAK
case 168:
#line 1030 "amf.l"
case 169:
YY_RULE_SETUP
#line 1030 "amf.l"
A_SCALARFIELD3_type = A_SCALARFIELD3_type_float;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1032 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_SCALARFIELD3_dims);
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1033 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_SCALARFIELD3_dims);
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1035 "amf.l"
ENTER(VALUE1); BUFFERSET(AX_SCALARFIELD3_bbox);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1036 "amf.l"
ENTER(VALUE2); BUFFERSET(AX_SCALARFIELD3_bbox);
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1038 "amf.l"
{
  if (!AX_SCALARFIELD3_name) FAIL("Required attribute `name' not set for `SCALARFIELD3' element.");
  if (!AX_SCALARFIELD3_type) FAIL("Required attribute `type' not set for `SCALARFIELD3' element.");
  if (!AX_SCALARFIELD3_dims) FAIL("Required attribute `dims' not set for `SCALARFIELD3' element.");
  if (!AX_SCALARFIELD3_bbox) FAIL("Required attribute `bbox' not set for `SCALARFIELD3' element.");
  LEAVE; STag_SCALARFIELD3();pushbuffer(pcdata_ix); BUFFERSET(pcdata_ix);; ENTER(IN_SCALARFIELD3);
 }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1045 "amf.l"
{
  if (!AX_SCALARFIELD3_name) FAIL("Required attribute `name' not set for `SCALARFIELD3' element.");
  if (!AX_SCALARFIELD3_type) FAIL("Required attribute `type' not set for `SCALARFIELD3' element.");
  if (!AX_SCALARFIELD3_dims) FAIL("Required attribute `dims' not set for `SCALARFIELD3' element.");
  if (!AX_SCALARFIELD3_bbox) FAIL("Required attribute `bbox' not set for `SCALARFIELD3' element.");
  LEAVE; STag_SCALARFIELD3(); pcdata_ix = 0; ETag_SCALARFIELD3(); popbuffer(); /* attribute */
  switch (YY_START) {
   case S_AMF_10: case S_AMF_1: case S_AMF_14: case S_AMF_12: case S_AMF: case S_AMF_6: case S_AMF_7: case S_AMF_3: case S_AMF_13: case S_AMF_9: case S_AMF_4: SET(S_AMF_14); break;
   case ROOT_SCALARFIELD3: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1056 "amf.l"
FAIL("Unexpected character `%c' in attribute list of SCALARFIELD3 element.", yytext[0]);
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1057 "amf.l"
FAIL("Bad attribute `%s' in `SCALARFIELD3' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_SCALARFIELD3):
#line 1058 "amf.l"
FAIL("EOF in attribute list of `SCALARFIELD3' element.");
	YY_BREAK


case 178:
YY_RULE_SETUP
#line 1062 "amf.l"
{
  LEAVE;
  BUFFERDONE;
  ETag_SCALARFIELD3();
  pcdata_ix = popbuffer();
  popbuffer(); /* attribute */
  switch (YY_START) {
   case S_AMF_10: case S_AMF_1: case S_AMF_14: case S_AMF_12: case S_AMF: case S_AMF_6: case S_AMF_7: case S_AMF_3: case S_AMF_13: case S_AMF_9: case S_AMF_4: SET(S_AMF_14); break;
   case ROOT_SCALARFIELD3: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1073 "amf.l"
FAIL("Unexpected end-tag `%s': `</SCALARFIELD3>' expected.",yytext);
	YY_BREAK
case YY_STATE_EOF(IN_SCALARFIELD3):
#line 1074 "amf.l"
FAIL("Premature EOF: `</SCALARFIELD3>' expected.");
	YY_BREAK

/* EPILOG: after the root element. */

case 180:
YY_RULE_SETUP
#line 1080 "amf.l"
{SET(PROLOG); yyless(0); CLEANUP; return -1;}
	YY_BREAK
case YY_STATE_EOF(EPILOG):
#line 1081 "amf.l"
SUCCEED;
	YY_BREAK

/* CHARACTER DATA. */

/* Non-defined standard entities... */
case 181:
YY_RULE_SETUP
#line 1088 "amf.l"
BUFFERPUTC('&');
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1089 "amf.l"
BUFFERPUTC('<');
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1090 "amf.l"
BUFFERPUTC('>');
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1091 "amf.l"
BUFFERPUTC('\'');
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1092 "amf.l"
BUFFERPUTC('"');
	YY_BREAK
/* Character entities. */
case 186:
YY_RULE_SETUP
#line 1095 "amf.l"
BUFFERPUTC((unsigned char)atoi(yytext+2));
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1096 "amf.l"
BUFFERPUTC((unsigned char)strtol(yytext+3,NULL,16));
	YY_BREAK


case 188:
#line 1101 "amf.l"
case 189:
#line 1102 "amf.l"
case 190:
#line 1103 "amf.l"
case 191:
YY_RULE_SETUP
#line 1103 "amf.l"
BUFFERPUTC('\n');
	YY_BREAK


case 192:
YY_RULE_SETUP
#line 1107 "amf.l"
ENTER(CDATA);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1108 "amf.l"
FAIL("Unexpected `]""]>' in character data.");
	YY_BREAK


case 194:
YY_RULE_SETUP
#line 1112 "amf.l"
BUFFERDONE; LEAVE;
	YY_BREAK
case YY_STATE_EOF(VALUE1):
#line 1113 "amf.l"
FAIL("EOF in literal (\"'\" expected).");
	YY_BREAK


case 195:
YY_RULE_SETUP
#line 1117 "amf.l"
BUFFERDONE; LEAVE;
	YY_BREAK
case YY_STATE_EOF(VALUE2):
#line 1118 "amf.l"
FAIL("EOF in literal (`\"' expected).");
	YY_BREAK


case 196:
YY_RULE_SETUP
#line 1122 "amf.l"
BUFFERPUTC(yytext[0]);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1123 "amf.l"
FAIL("Spurious `%c' in character data.",yytext[0]);
	YY_BREAK


case 198:
YY_RULE_SETUP
#line 1127 "amf.l"
LEAVE;
	YY_BREAK
/* "]""]"		BUFFERPUTC(yytext[0]); BUFFERPUTC(yytext[1]); */
case 199:
YY_RULE_SETUP
#line 1129 "amf.l"
BUFFERPUTC(yytext[0]);
	YY_BREAK
case YY_STATE_EOF(CDATA):
#line 1130 "amf.l"
FAIL("EOF in CDATA section.");
	YY_BREAK

/* Impossible rules to avoid warnings from flex(1). */
/* Ideally, this should be replaced by code in flexml.pl that
    generates just the states not covered by other rules. */

case 200:
YY_RULE_SETUP
#line 1137 "amf.l"
FAIL("Syntax error on character `%c'.", yytext[0]);
	YY_BREAK

case 201:
YY_RULE_SETUP
#line 1140 "amf.l"
ECHO;
	YY_BREAK
#line 4257 "lex.amf_yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ROOT_AMF):
case YY_STATE_EOF(S_AMF_2):
case YY_STATE_EOF(S_AMF_5):
case YY_STATE_EOF(S_AMF_8):
case YY_STATE_EOF(S_AMF_11):
case YY_STATE_EOF(S_AMF_13):
case YY_STATE_EOF(ROOT_MOLTRAJECTORYBUNDLE):
case YY_STATE_EOF(S_MOLTRAJECTORYBUNDLE_1):
case YY_STATE_EOF(ROOT_MOLECULEBUNDLE):
case YY_STATE_EOF(S_MOLECULEBUNDLE_1):
case YY_STATE_EOF(ROOT_MOLTRAJECTORY):
case YY_STATE_EOF(S_MOLTRAJECTORY):
case YY_STATE_EOF(S_MOLTRAJECTORY_3):
case YY_STATE_EOF(ROOT_MOLECULE):
case YY_STATE_EOF(S_MOLECULE):
case YY_STATE_EOF(ROOT_TOPOLOGY):
case YY_STATE_EOF(S_TOPOLOGY):
case YY_STATE_EOF(S_TOPOLOGY_2):
case YY_STATE_EOF(S_TOPOLOGY_4):
case YY_STATE_EOF(ROOT_LEVEL):
case YY_STATE_EOF(S_LEVEL_2):
case YY_STATE_EOF(ROOT_GROUPS):
case YY_STATE_EOF(ROOT_ATTRIBUTE):
case YY_STATE_EOF(ROOT_DATA):
case YY_STATE_EOF(ROOT_COORDINATES):
case YY_STATE_EOF(ROOT_OBSERVABLE):
case YY_STATE_EOF(ROOT_SCALARFIELD3):
case YY_STATE_EOF(IMPOSSIBLE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1617 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1617 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1616);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#include <stdio.h>
#include <io.h>
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 1140 "amf.l"


/* Element context stack lookup. */
int element_context(int i)
{
  return (0<i && i<yy_start_stack_depth
	  ? yy_start_stack[yy_start_stack_ptr - i]
	  : 0);
}

#ifdef FLEX_DEBUG
void print_yy_stack(char* fmt, ...)
{
  int i = 0; va_list ap; va_start(ap, fmt);
  vfprintf(stderr, fmt, ap);
  if (statenames) {
      for (i=1; i<yy_start_stack_ptr; i++) {
          fprintf(stderr, "%s/", statenames[yy_start_stack[i] ]);
      }
      fprintf(stderr,"%s\n", statenames[YY_START]);
  }
  va_end(ap);
}

void print_bufferstack()
{
    int i;
    fputs("Buffer: ", stderr);
    for (i = 0; i < blimit; i++) {
       if ( bufferstack[i] == '\377' ) break;
         putc(bufferstack[i], stderr);
    }
    putc('\n', stderr);
}

static void debug_enter(int state, const char* statename) {
  yy_push_state(state);
  if (yy_flex_debug) {
       print_yy_stack("--ENTER(%s) : ",statename);
       print_bufferstack();
  }
}

static void debug_leave(void) {
    if (yy_flex_debug) {
        print_yy_stack("--LEAVE : ");
	print_bufferstack();
    }
  yy_pop_state();
}

static void debug_set(int state, const char* statename) {
  BEGIN(state);
  if (yy_flex_debug) print_yy_stack("--SET(%s) : ",statename);
}
#endif


static void cleanup(void)
{
    if (statenames) {
        free(statenames);
	statenames = NULL;
    }
    free(bufferstack);
    bufferstack = NULL;

    free(indexstack);
    indexstack = NULL;
}


static int fail(const char* fmt, ...)
{
    int chars_left, used;
    va_list ap; va_start(ap, fmt);
#ifdef FLEXML_yylineno
    used = sprintf(flexml_err_msg,
		   "Invalid XML (XML input line %d, state %d): ",
		   yylineno, YY_START);
#else
    used = sprintf(flexml_err_msg,
		   "Invalid XML (state %d): ",
		   YY_START);
#endif
    chars_left = flexml_max_err_msg_size - used - 1;
    vsnprintf(flexml_err_msg + used, chars_left, fmt, ap);
    va_end(ap);

#ifndef FLEXML_quiet_parser
    /* print directly to sdterr */
    fprintf(stderr, "%s\n", flexml_err_msg);
    flexml_err_msg[0] = '\0';
#endif

    cleanup();

    return 1;
}
